openapi: 3.0.0
info:
  title: nghis-laboratory-service-api
  version: 1.25.2
  x-artifact-name: laboratory-service
  x-clients:
    - java
    - typescript-angular
    - go
    - python
x-configuration:
  module: git.prosoftke.sk/nghis/services/laboratory/laboratory-service
  executables:
    - shortname: laboratory
      modules:
        - api
        - postgres-sqlc
x-errors:
  IMPORT_FILE_DOESNT_EXIST:
    message: "The importing file doesn't exist with Redis key: %s"
    description: "When trying to do a laboratory manual import and the file doesnt exist."
    httpCode: 400
  LABORATORY_DOESNT_EXIST:
    message: "laboratory does not exist: %s"
    description: "Validating existence of laboratory."
    httpCode: 400
  MANUAL_DOESNT_EXIST:
    message: "manual does not exist: %s"
    description: "Validating existence of manual."
    httpCode: 400
  MANUAL_VERSION_DOESNT_EXIST:
    message: "manual version does not exist: %s"
    description: "Validating existence of manual."
    httpCode: 400
  MANUAL_ALREADY_EXISTS:
    message: "manual already exists: %s"
    description: "Validating existence of manual."
    httpCode: 400
  VERSION_ALREADY_EXISTS:
    message: "version %s for manual %s already exists"
    description: "Validating existence of version for a specific manual."
    httpCode: 400
  ANOTHER_IMPORT_PROCESSING:
    message: "another manual import is processing"
    description: "Validating import is processing."
    httpCode: 400
  # LABORATORY_MANUAL_VERSION_CONFLICT: not generated by the generator, used in import validator but has customized text output
paths:
  /admin/laboratory:
    post:
      x-generated:
        package: admin
      tags:
        - Admin
      operationId: LaboratoryCreate
      summary: "Service endpoint: Vytvor zaznam o laboratori včetně typů vyšetření (discipline), které Laboratoř poskytuje"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LaboratoryCreateReq'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LaboratoryResp"
          description: Created
        "400":
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        "500":
          description: Internal errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
    put:
      x-generated:
        package: admin
      tags:
        - Admin
      operationId: LaboratoryUpdate
      summary: "Service endpoint: Uloží změny v existujícím záznamu o laboratoři včetně typů vyšetření (discipline), které Laboratoř poskytuje"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LaboratoryCreateReq'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LaboratoryResp"
          description: OK
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        "500":
          description: Internal errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
  /laboratory/list:
    post:
      x-generated:
        package: laboratory
      tags:
        - Laboratory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LaboratoryListReq'
        required: true
      operationId: ListLaboratories
      summary: Getting laboratories by a filter - LaboratoryReq
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LaboratoryResp'
        "400":
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        "500":
          description: Internal errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
  /laboratory-manual/list:
    post:
      x-generated:
        package: laboratorymanual
      tags:
        - Laboratory Manual
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LaboratoryManualListReq'
        required: true
      operationId: ListLaboratoryManuals
      summary: Get laboratory manuals per tenant by a filter
      description: Gets all laboratory manuals for the tenant, sorted by the code ASC. The response can be filtered also by laboratory code, laboratory manual code and validity.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LaboratoryManualListResp'
        "400":
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        "500":
          description: Internal errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
  /laboratory-test/list:
    post:
      x-generated:
        package: laboratorytest
      tags:
        - Laboratory Test
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LaboratoryTestListReq'
        required: true
      operationId: ListLaboratoryTests
      summary: Laboratory tests for laboratory manual version
      description: Get valid laboratory tests for laboratory manual version, sorted by test code.<br><br>Returns `404 Not Found` if laboratory manual version was not found or laboratory manual assigned to you.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LaboratoryTestListResp'
        "400":
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        "404":
          description: Not found errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        "500":
          description: Internal errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
  /laboratory-test/search:
    post:
      x-generated:
        package: laboratorytest
      tags:
        - Laboratory Test
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LaboratoryTestSearchReq'
        required: true
      operationId: SearchLaboratoryTests
      summary: Fulltext search
      description: Searches over laboratory test name, code and NCLP code. Case and diacricits insensitive, searches from the beginning of the words.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LaboratoryTestListResp'
        "400":
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        "404":
          description: Not found errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        "500":
          description: Internal errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
  /admin/laboratory-manual/import:
    post:
      x-generated:
        package: admin
      tags:
        - Admin
      operationId: QueueImportLaboratoryManual
      summary: "Imports laboratory manual"
      description: "Service endpoint: enqueues a laboratory manual import. On conflict returns error code 'LABORATORY_MANUAL_VERSION_CONFLICT' (there is a pending or completed import for the same laboratory+manual+version, or a newer version of the same laboratory manual exists)."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LaboratoryManualImportReq'
      responses:
        "201":
          description: Created
        "400":
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        "500":
          description: Internal errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
  /admin/laboratory-manual/version/{versionId}/request-sets:
    put:
      x-generated:
        package: admin
      tags:
        - Admin
      operationId: UpdateRequestSets
      summary: "Update request sets and their assigned tests for laboratory manual version"
      description: "Replaces/upserts request sets and their test assignments for the specified laboratory manual version. Returns detailed success/error information for each request set processed."
      parameters:
        - name: versionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: "Laboratory manual version ID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestSetsUpdateReq'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestSetsUpdateResp'
        "400":
          description: Validation errors (request format issues)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        "404":
          description: Version not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        "500":
          description: Internal errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
  /admin/laboratory-manual/assign:
    post:
      x-generated:
        package: admin
      tags:
        - Admin
      operationId: AdminLaboratoryManualAssign
      summary: Assigns laboratory manual to the certain tenant.
      description: Assigns laboratory and laboratory manual to the certain tenant. <strong>IMPORTANT!</strong> This endpoint should be accessible only based on the admin role. Otherwise every tenant can assign anything to every tenant.<br><br>Only one tenant per existing laboratory manual per existing laboratory, otherwise validation error is returned.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminLaboratoryManualAssignReq'
      responses:
        "204":
          description: Success (No Content)
        "400":
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        "500":
          description: Internal errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
  /laboratory-test/details:
    post:
      x-generated:
        package: laboratorytest
      tags:
        - Laboratory Test
      operationId: GetLaboratoryTestDetails
      summary: Retrieves test details by testIDs for a concrete manualID and a version
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LaboratoryTestsDetailReq'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LaboratoryTestsDetailResp"
          description: OK
        "400":
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        "500":
          description: Internal errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
  /admin/laboratory-manual/check-version:
    get:
      x-generated:
        package: admin
      tags:
        - Admin
      parameters:
        - name: code
          schema:
            type: string
            minLength: 1
          in: query
          required: true
          description: Laboratory manual code of the controlled version
          example: UNILABS
        - name: version
          schema:
            type: string
            minLength: 1
          in: query
          required: true
          description: Controlled version
          example: 1.3.5
        - name: validityStart
          schema:
            format: date-time
            type: string
          in: query
          required: true
          description: Start time of validity in RFC3339 datetime format
          example: 2024-02-01T00:00:00.000Z
      operationId: AdminCheckVersion
      summary: Check version
      description: "Checks whether the requested version (by code, version, validityStart) is importable under “latest not-failed” semantics: validityStart must be after the latest not-failed version’s validityStart and there must be no existing not-failed import for the same code+version. Re-import is allowed when the previous import for the code+version failed."
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminLaboratoryManualCheckVersionResp"
        "400":
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        "500":
          description: Internal errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'

components:
  schemas:
    LaboratoryResp:
      x-group: laboratory
      title: LaboratoryData
      description: Všechna data o laboratoři
      type: object
      required:
        - code
        - name
      properties:
        code:
          type: string
          example: UNILABS_BLAVA_DNV
          description: Unikatni kod zaznamu o Laboratori, který je v rámci api komunikace používán pro identifikaci záznamu.
        name:
          type: string
          example: UNILABS Laboratórium klinickej biochémie a hematológie, Bratislava - Devínska Nová Ves
          description: Název laboratória
        address:
          type: string
          description: adresa laboratoře
          example: Ivana Kadlečíka 2, 841 06 Bratislava
        notes:
          type: string
          description: poznámka
          example: Laboratórium v rámci nemocnice
        valid:
          type: boolean
          description: povinny příznak, zda je záznam laboratoře platný (false/true)
          example: true
    LaboratoryListReq:
      x-group: laboratory
      title: LaboratoryListReq
      description: Požadované filtry pro seznam Laboratoří. Bez filtrů vrací seznam všech platných záznamů. Pokud je předáno více filtr musí být splněny všechny.
      type: object
      properties:
        code:
          type: string
          example: BLAVA
          description: Vyhledá záznamy, které v kódu obsahují zadaný řetězec
        name:
          type: string
          example: UNILABS
          description: Vyhledá záznamy, které v názvu obsahují zadaný řetězec
        address:
          type: string
          description: Vyhledá záznamy, které v adrese obsahují zadaný řetězec
          example: Bratislav
        validity:
          $ref: '#/components/schemas/Validity'
    LaboratoryManualListReq:
      x-group: laboratorymanual
      title: LaboratoryManualListReq
      type: object
      required:
        - validInTime
      properties:
        validInTime:
          type: string
          format: date-time
          description: "RFC3339 datetime, e.g. 2024-02-01T12:20:25.333Z. The result is filtered only to the items valid in the requested time."
        laboratoryCodes:
          type: array
          items:
            type: string
          example: ["UNILABS", "LAB2"]
          description: If set, the result is filtered by laboratory code.
        laboratoryManualCodes:
          type: array
          items:
            type: string
          example: ["UNILABS_MANUAL", "LAB2_MANUAL"]
          description: If set, the result is filtered by laboratory manual code.
    LaboratoryManualListResp:
      x-group: laboratorymanual
      title: LaboratoryManualResp
      description: List of laboratory manual items.
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/LaboratoryManualItem'
    LaboratoryManualItem:
      x-group: laboratorymanual
      title: LaboratoryManualItemResp
      type: object
      required:
        - id
        - code
        - name
        - laboratoryId
        - laboratoryCode
        - laboratoryName
        - laboratoryManualVersionId
        - laboratoryManualVersion
      properties:
        id:
          type: string
        code:
          type: string
        name:
          type: string
        laboratoryId:
          type: string
        laboratoryCode:
          type: string
        laboratoryName:
          type: string
        laboratoryNotes:
          type: string
        laboratoryAddress:
          type: string
        laboratoryManualVersionId:
          type: string
        laboratoryManualVersion:
          type: string
    LaboratoryTestListReq:
      x-group: laboratorytest
      title: LaboratoryTestListReq
      type: object
      required:
        - laboratoryManualVersionId
      properties:
        laboratoryManualVersionId:
          type: string
          example: "aaa6d5ae-533f-458e-a9cf-4d5613914426"
          description: ID of laboratory manual version.
    LaboratoryTestSearchReq:
      x-group: laboratorytest
      title: LaboratoryTestSearchReq
      type: object
      required:
        - laboratoryManualVersionId
        - query
        - size
      properties:
        laboratoryManualVersionId:
          type: string
          example: "aaa6d5ae-533f-458e-a9cf-4d5613914426"
          description: ID of laboratory manual version.
          x-validate:
            - uuid4
        query:
          type: string
          example: "ure"
          description: Query searches over laboratory test name, code and NCLP code. Case and diacricits insensitive, searches from the beginning of the words.
          minLength: 1
          x-validate:
            - gte=1
        size:
          type: integer
          format: int32
          description: Maximum requested count of result items. Min size is 1, max size is 100.
          minimum: 1
          maximum: 100
          x-validate:
          - gte=1
          - lte=100
    LaboratoryTestListResp:
      x-group: laboratorytest
      title: LaboratoryTestListResp
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/LaboratoryTestItem'
    LaboratoryTestItem:
      x-group: laboratorytest
      title: LaboratoryTestItem
      type: object
      required:
        - id
        - laboratoryManualVersionId
        - code
        - name
        - nclpCode
        - testType
        - laboratoryManualVersionValidityStart
      properties:
        id:
          type: string
        laboratoryManualVersionId:
          type: string
        code:
          type: string
        name:
          type: string
        unit:
          type: string
        nclpCode:
          type: string
        discipline:
          type: string
        component:
          type: string
        comment:
          type: string
        testType:
          $ref: '#/components/schemas/TestType'
        block:
          type: string
        labOrder:
          type: string
        laboratoryManualVersionValidityStart:
          type: string
          format: date-time
          description: "RFC3339 datetime, e.g. 2024-02-01T12:20:25.333Z"
        laboratoryManualVersionValidityEnd:
          type: string
          format: date-time
          description: "RFC3339 datetime, e.g. 2024-02-01T12:20:25.333Z"
    LaboratoryCreateReq:
      x-group: laboratory
      title: Laboratory create request
      description: Zápis dat laboratoře včetně disciplines, které laboratoř provozuje.
      type: object
      required:
        - laboratoryData
      properties:
        laboratoryData:
          $ref: '#/components/schemas/LaboratoryResp'
    Validity:
      type: string
      default: VALID
      enum:
        - VALID
        - INVALID
        - ALL
      x-validate:
        - omitempty,oneof=VALID INVALID ALL
      description: Filtruje dle platnosti záznamu VALID - pouze platné (výchozí hodnota pokud parametr není předán) / INVALID - pouze neplatné / ALL - všechny záznamy bez ohledu na platnost
    LaboratoryManualImportRes:
      x-group: laboratory
      title: LaboratoryManualSyncReq
      description: Požadavek na synchronizaci celé laboratorní příručky
      type: object
      required:
        - result
      properties:
        result:
          type: string
          example: "OK"
    LaboratoryManualImportReq:
      x-group: laboratory
      title: LaboratoryManualSyncReq
      description: Request for import / sync of a whole laboratory manual.
      type: object
      required:
        - laboratoryCode
        - laboratoryManualCode
        - contentName
      properties:
        laboratoryCode:
          type: string
          deprecated: true
          description: The code of the imported laboratory. This field is deprecated and will be removed (laboratory code will be taken from the source data).
          example: UNILABS_SLOVAKIA
        laboratoryManualCode:
          type: string
          deprecated: true
          description: The code of the imported laboratory manual. This field is deprecated and will be removed (laboratory manual code will be taken from the source data).
          example: UNILABS
        contentName:
          type: string
          description: Name of the referred storage key carrying the data.
          example: UNILABS_20250101.json

    AdminLaboratoryManualCheckVersionResp:
      x-group: admin
      title: AdminLaboratoryManualCheckVersionResp
      description: The result of the version check.
      type: object
      required:
        - isImportPossible
      properties:
        isImportPossible:
          type: boolean
          description: "True if the requested version is importable: it satisfies “latest not-failed” validity and there is no existing not-failed import of the same code+version. Re-imports are allowed only if the prior import for the code+version failed."
          example: true
        reason:
          type: string
          description: If `isImportPossible` is false, here will be the reason why.
          example: "Laboratory test import is still in progress."
    AdminLaboratoryManualAssignReq:
      x-group: admin
      title: AdminLaboratoryManualAssignReq
      type: object
      required:
        - laboratoryId
        - laboratoryManualId
        - tenantId
      properties:
        laboratoryId:
          type: string
          description: Laboratory ID (UUID)
          example: 1441ee52-8029-4f9d-a7b6-5c15ac8a3d96
        laboratoryManualId:
          type: string
          description: Laboratory Manual ID (UUID)
          example: a85da152-9f2e-4c06-86d1-3b51768f13a6
        tenantId:
          type: integer
          format: int32
          description: tenant ID
          example: 123

    TestType:
      description: Laboratory test types enum.
      type: string
      enum:
        - METHOD
        - METHOD_ASSOCIATED
        - GROUP
      example: METHOD

    ValueType:
      type: string
      description: Typ hodnoty klinické informace
      enum:
        - Text
        - Date
        - DateTime
        - Time
        - Integer
        - Boolean
        - Enum
      example: Enum

    Level:
      type: string
      description: Úroveň klinické informace (např. pro pacienta nebo vzorek)
      enum:
        - PATIENT
        - SPECIMEN
      example: PATIENT

    LaboratoryTestsDetailReq:
      x-group: catalogue
      title: LaboratoryTestDetail
      description: Detail laboratorního testu
      type: object
      required:
        - laboratoryTestIds
        - laboratoryManualVersionID
      properties:
        laboratoryManualVersionID:
          type: string
          example: "aaa6d5ae-533f-458e-a9cf-4d5613914426"
          description: ID of laboratory manual version.
        laboratoryTestIds:
          type: array
          items:
            type: string
          description: Seznam ID laboratorních vyšetření, pro která jsou požadovány detailní informace

    LaboratoryTestsDetailResp:
      x-group: catalogue
      title: LaboratoryTestDetailResp
      description: Detail laboratorního testu
      type: object
      required:
        - laboratoryManualVersionId
        - tests
      properties:
        laboratoryManualVersionId:
          type: string
          example: 46e9ce7f-f2b4-40e8-8273-28ba1783c40d
          description: NGHIS unikátní identifikátor verze laboratorní příručky, ze které jsou laboratorní metody
        items:
          type: array
          items:
            $ref: '#/components/schemas/LaboratoryTestItemDetail'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ListError'
    ListError:
      type: object
      x-group: common
      required:
        - item
        - reason
      properties:
        item:
          type: string
        reason:
          $ref: '#/components/schemas/ListErrorReason'
    ListErrorReason:
      type: string
      enum: [ "ENTITY_NOT_FOUND" ]

    LaboratoryTestItemDetail:
      x-group: catalogue
      description: Detail laboratorního testu
      type: object
      required:
        - id
        - code
        - name
      properties:
        id:
          type: string
          example: 46e9ce7f-f2b4-40e8-8273-28ba1783c4dc
          description: NGHIS unikátní identifikátor laboratorního testu
        code:
          type: string
          example: GLU
          description: Kód laboratorního testu
        name:
          type: string
          example: Glucose
          description: Název laboratorního testu
        unit:
          type: string
          example: mmol/L
          description: jednotka
        nclpCode:
          type: string
          example: "48568"
          description: NČLP kód laboratorního testu
        discipline:
          type: string
          example: Hematology
        component:
          type: string
          example: Fasting sample required
          description: Komponenta laboratorního testu
        availableForRequest:
          type: boolean
          example: true
          description: Příznak zda je možné test objednat samostatně
        comment:
          type: string
          example: komentář k položce z laboratoře
        testType:
          $ref: '#/components/schemas/TestType'
        block:
          type: string
          example: BIOCHEM
          description: Základní zařazení laboratorního testu
        labOrder:
          type: string
          example: 9999-C022
          description: Pořadí laboratorního testu v rámci bloku laboratorního testu
        valid:
          type: boolean
          example: true
          description: Příznak zda je položka platná (Neplatné by neměli být vraceny)
        importMsg:
          type: string
          example: no test found for code 'HB'
          description: Chybová zpráva - většinou by měla doplňovat informaci o neplatnosti položky
        assignedMethods:
          type: array
          description: Přiřazené metody do skupiny (GROUP), nebo k asociované metodě (METHOD_ASSOCIATED)
          items:
            $ref: '#/components/schemas/LaboratoryTestItemDetail'
        clinicalInfos:
          type: array
          description: Informace o klinických informací, které jsou k vyšetření požadovány
          items:
            $ref: '#/components/schemas/ClinicalInfoDetail'
        materials:
          type: array
          description: Informace o materiálu potřebném pro vyšetření
          items:
            $ref: '#/components/schemas/MaterialDetail'
        instruction:
          type: string
          example: transport always on the ice
          description: further test instruction (e.g. how to handle the sample)
        isCyclicReference:
          type: boolean
          example: true
          description: A flag indicating if the test is cyclic - so the assignedMethods will be cut off
    ClinicalInfoDetail:
      x-group: laboratory
      title: ClinicalInfoDetail
      description: Detailní informace o klinické informaci
      type: object
      required:
        - id
        - code
        - name
        - level
        - valueType
      properties:
        id:
          type: string
          description: Uníkatní id položky laboratorního testu
          example: "999"
        code:
          type: string
          description: kód Materiálu
          example:
        name:
          type: string
          description: Název materiálu
          example:
        nclpCode:
          type: string
          nullable: true
          description: NČLP kód klinické informace (volitelný)
          example: "12345"
        level:
          $ref: '#/components/schemas/Level'
        comment:
          type: string
          nullable: true
          description: Doplňující poznámka
          example: Pacient udává alergii na penicilin
        valueType:
          $ref: '#/components/schemas/ValueType'
        enumValues:
          type: array
          description: Povolena hodnoty, pokud je `valueType` nastaven na `Enum`
          items:
            $ref: '#/components/schemas/EnumValue'
        validationRules:
          type: string
          nullable: true
          description: Volitelný regex nebo pravidlo pro validaci hodnoty
          example: "^\\d{1,3}$"

    EnumValue:
      x-group: laboratory
      type: object
      description: Pojmenovaná hodnota v případě `Enum` typu klinické informace
      required:
        - name
      properties:
        code:
          type: string
          description: Kód hodnoty (volitelný)
          example: "A1"
        name:
          type: string
          description: Názov hodnoty
          example: Alergie na penicilin
        order:
          type: integer
          format: int32
          description: Volitelné pořadí hodnoty v UI
          example: 1

    MaterialDetail:
      x-group: laboratory
      title: MaterialDetail
      description: Detailní informace o materiálu
      type: object
      required:
        - id
        - code
        - name
      properties:
        id:
          type: string
          description: Uníkatní id položky laboratorního testu
          example: "999"
        code:
          type: string
          description: kód Materiálu
          example:
        name:
          type: string
          description: Název materiálu
          example:
        color:
          type: string
          description: Barevné označení - kód barvy
          example:
        colorName:
          type: string
          description: Barevné označení - název barvy
          example:

    RequestSetsUpdateReq:
      x-group: admin
      title: RequestSetsUpdateReq
      description: Request for updating request sets
      type: object
      required:
        - requestSets
      properties:
        requestSets:
          type: array
          description: Array of request sets to update
          items:
            $ref: '#/components/schemas/RequestSetUpdate'
    
    RequestSetUpdate:
      x-group: admin
      title: RequestSetUpdate
      description: Request set data
      type: object
      required:
        - code
        - name
      properties:
        code:
          type: string
          description: Unique code for the request set
          example: "BASIC_PANEL"
        name:
          type: string
          description: Display name of the request set
          example: "Basic Laboratory Panel"
        colorHex:
          type: string
          nullable: true
          description: Hex color code for UI display
          example: "#FF5733"
        notes:
          type: string
          nullable: true
          description: Additional notes
          example: "Standard basic laboratory tests"
        mainSet:
          type: boolean
          default: false
          description: Whether this is the main/default request set
    
    RequestSetsUpdateResp:
      x-group: admin
      title: RequestSetsUpdateResp
      description: Response after updating request sets with detailed success/error information
      type: object
      properties:
        success:
          type: array
          description: Array of successfully processed request set codes
          items:
            type: string
          example: ["BASIC_PANEL", "CARDIO_PANEL"]
        errors:
          type: array
          description: Array of failed request sets with error details
          items:
            $ref: '#/components/schemas/RequestSetError'
    
    
    RequestSetError:
      x-group: admin
      title: RequestSetError
      description: Error details for a failed request set
      type: object
      required:
        - requestSet
        - error
      properties:
        requestSet:
          $ref: '#/components/schemas/RequestSetUpdate'
          description: The complete request set object that failed to process
        error:
          type: string
          description: Error message explaining why the request set failed
          example: "Request set code 'INVALID_CODE' already exists in this version"
        errorCode:
          type: string
          nullable: true
          description: Specific error code for programmatic handling
          example: "DUPLICATE_CODE"
    

    ApplicationError:
      x-group: errors
      title: ApplicationError
      type: object
      description: The same type for all errors returned from API.
      required:
        - text
        - code
      properties:
        text:
          type: string
        code:
          type: string
          enum:
            - BUSINESS_ERROR
            - VALIDATION_ERROR
            - MISSING_REQUIRED_FIELD_ERROR
            - OBJECT_VERSION_MISMATCH_ERROR
            - NOT_FOUND_ERROR
            - SERVICE_CALL_ERROR
            - FORBIDDEN_ERROR
            - INTERNAL_SERVER_ERROR
            - MISSING_TENANT
            - AUTH_HEADER
            - UNPROCESSABLE_ENTITY_FOREIGN_KEY
            - UNPROCESSABLE_ENTITY_UNIQUE
            - IMPORT_FILE_DOESNT_EXIST
            - LABORATORY_DOESNT_EXIST
            - MANUAL_DOESNT_EXIST
            - MANUAL_ALREADY_EXISTS
            - VERSION_ALREADY_EXISTS
            - ANOTHER_IMPORT_PROCESSING
            - LABORATORY_MANUAL_VERSION_CONFLICT
            - MANUAL_VERSION_DOESNT_EXIST

#    This structure is just for sharing the synchronization structure for other adapters
    LaboratoryManualSyncContent:
      x-group: laboratorysync
      type: object
      description:  Internal structure used for decoding base64-encoded content in registry/manual sync endpoints.
        This object is not directly exposed in the HTTP contract. It just prescribes the structure for the synchronization to adapters.
      required:
        - name
        - laboratoryManual
        - laboratoryManualVersion
      properties:
        name:
          type: string
        laboratoryManual:
          $ref: '#/components/schemas/ManualInfo'
        laboratoryManualVersion:
          $ref: '#/components/schemas/ManualVersionInfo'

    ManualInfo:
      x-group: laboratorysync
      type: object
      required:
        - name
        - code
      properties:
        name:
          type: string
        code:
          type: string

    ManualVersionInfo:
      x-group: laboratorysync
      type: object
      required:
        - version
        - validFrom
        - registries
        - tests
      properties:
        version:
          type: string
        validFrom:
          type: string
          format: date-time
        validTo:
          type: string
          format: date-time
        registries:
          $ref: '#/components/schemas/Registries'
        tests:
          $ref: '#/components/schemas/LaboratoryTests'

    Registries:
      x-group: laboratorysync
      type: object
      required:
        - materials
        - clinicalInfos
      properties:
        materials:
          type: array
          items:
            $ref: '#/components/schemas/Material'
        clinicalInfos:
          type: array
          items:
            $ref: '#/components/schemas/ClinicalInfo'

    Material:
      x-group: laboratorysync
      type: object
      required:
        - code
        - name
      properties:
        code:
          type: string
        name:
          type: string
        color:
          type: string

    ClinicalInfo:
      x-group: laboratorysync
      type: object
      required:
        - code
        - name
        - level
        - valueType
      properties:
        code:
          type: string
        name:
          type: string
        nclpCode:
          type: string
        level:
          $ref: '#/components/schemas/ClinicalInfoLevel'
        comment:
          type: string
        valueType:
          $ref: '#/components/schemas/ValueType'
        enumValues:
          type: array
          items:
            $ref: '#/components/schemas/EnumValue'
        validationRules:
          type: string

    LaboratoryTests:
      x-group: laboratorysync
      type: object
      required:
        - methods
        - groups
        - associatedMethods
      properties:
        methods:
          type: array
          items:
            $ref: '#/components/schemas/LaboratoryMethod'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/LaboratoryGroup'
        associatedMethods:
          type: array
          items:
            $ref: '#/components/schemas/AssociatedMethod'

    LaboratoryMethod:
      x-group: laboratorysync
      type: object
      required:
        - code
        - name
        - nclpCode
        - discipline
        - availableForRequest
      properties:
        code:
          type: string
        name:
          type: string
        unit:
          type: string
        nclpCode:
          type: string
        discipline:
          type: string
        component:
          type: string
        availableForRequest:
          type: boolean
        comment:
          type: string
        block:
          type: string
        order:
          type: string
        clinicalInfoCodes:
          type: array
          items:
            type: string
        materialCodes:
          type: array
          items:
            type: string
        pricesList:
          type: array
          items:
            $ref: '#/components/schemas/MethodPrice'
        instruction:
          type: string
          example: transport always on the ice
          description: further test instruction (e.g. how to handle the sample)

    LaboratoryGroup:
      x-group: laboratorysync
      type: object
      required:
        - code
        - name
        - nclpCode
        - discipline
      properties:
        code:
          type: string
        name:
          type: string
        nclpCode:
          type: string
        discipline:
          type: string
        component:
          type: string
        comment:
          type: string
        block:
          type: string
        order:
          type: string
        pricesList:
          type: array
          items:
            $ref: '#/components/schemas/MethodPrice'
        methods:
          type: array
          items:
            type: string

    AssociatedMethod:
      x-group: laboratorysync
      type: object
      required:
        - parentTestCode
        - methods
      properties:
        parentTestCode:
          type: string
        methods:
          type: array
          items:
            type: string

    MethodPrice:
      x-group: laboratorysync
      type: object
      required:
        - code
        - name
        - currency
        - price
      properties:
        code:
          type: string
        name:
          type: string
        currency:
          type: string
        price:
          type: string

    ClinicalInfoLevel:
      type: string
      enum: [ PATIENT, SPECIMEN ]
