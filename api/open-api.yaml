openapi: 3.0.0
info:
  title: waiting-room-service-api
  version: 1.0.0
  x-artifact-name: waiting-room-service
  x-clients:
    - typescript-angular
    - go
x-configuration:
  module: github.com/arfis/waiting-room
  executables:
    - shortname: waiting-room
      modules:
        - api
        - postgres-sqlc
x-errors:
  QUEUE_ENTRY_NOT_FOUND:
    message: "Queue entry not found: %s"
    description: "When trying to find a queue entry that doesn't exist."
    httpCode: 404
  INVALID_ROOM_ID:
    message: "Invalid room ID: %s"
    description: "When room ID is invalid or doesn't exist."
    httpCode: 400
  CARD_READ_FAILED:
    message: "Failed to read card data"
    description: "When card reading fails."
    httpCode: 400
  QUEUE_EMPTY:
    message: "Queue is empty"
    description: "When trying to call next but no one is waiting."
    httpCode: 400
paths:
  /config:
    get:
      x-generated:
        package: configuration
      tags:
        - Configuration
      summary: Retrieve configuration and available rooms
      operationId: GetConfiguration
      responses:
        '200':
          description: Configuration payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigurationResponse'
  /waiting-rooms/{roomId}/swipe:
    post:
      x-generated:
        package: kiosk
      tags:
        - Kiosk
      operationId: SwipeCard
      summary: Kiosk swipe to join queue
      parameters:
        - in: path
          name: roomId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SwipeRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JoinResult'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        '500':
          description: Internal errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'

  /user-services:
    get:
      x-generated:
        package: kiosk
      tags:
        - Kiosk
      operationId: GetUserServices
      summary: Get available services for a user
      parameters:
        - in: query
          name: identifier
          required: true
          schema: { type: string }
          description: User identifier (e.g., ID number)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserService'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        '500':
          description: Internal errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
  /queue-entries/token/{qrToken}:
    get:
      x-generated:
        package: queue
      tags:
        - Queue
      operationId: GetQueueEntryByToken
      summary: Resolve QR token to public entry data
      parameters:
        - in: path
          name: qrToken
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PublicEntry' }
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        '500':
          description: Internal errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
  /waiting-rooms/{roomId}/service-points/{servicePointId}/next:
    post:
      x-generated:
        package: queue
      tags:
        - Queue
      operationId: CallNext
      summary: Call next entry
      parameters:
        - in: path
          name: roomId
          required: true
          schema: { type: string }
        - in: path
          name: servicePointId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueueEntry'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        '500':
          description: Internal errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
  /waiting-rooms/{roomId}/finish:
    post:
      x-generated:
        package: queue
      tags:
        - Queue
      operationId: FinishCurrent
      summary: Finish current person
      parameters:
        - in: path
          name: roomId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueueEntry'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        '500':
          description: Internal errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
  /waiting-rooms/{roomId}/queue:
    get:
      x-generated:
        package: queue
      tags:
        - Queue
      operationId: GetQueueEntries
      summary: Get queue entries
      parameters:
        - in: path
          name: roomId
          required: true
          schema: { type: string }
        - in: query
          name: state
          required: false
          schema:
            type: array
            items:
              type: string
              enum: [WAITING, CALLED, IN_SERVICE, COMPLETED, SKIPPED, CANCELLED, NO_SHOW]
          description: Filter entries by status. Can be a single state or an array of states
          style: form
          explode: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QueueEntry'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        '500':
          description: Internal errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
  /waiting-rooms/{roomId}/service-points:
    get:
      x-generated:
        package: queue
      tags:
        - Queue
      operationId: GetServicePoints
      summary: Get service points for a room
      parameters:
        - in: path
          name: roomId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Service points retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServicePoint'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        '500':
          description: Internal errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
  /managers/{managerId}/login:
    post:
      x-generated:
        package: servicepoint
      tags:
        - ServicePoint
      operationId: ManagerLogin
      summary: Manager login to service point
      parameters:
        - in: path
          name: managerId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagerLoginRequest'
      responses:
        '200':
          description: Manager logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagerStatus'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /managers/{managerId}/logout:
    post:
      x-generated:
        package: servicepoint
      tags:
        - ServicePoint
      operationId: ManagerLogout
      summary: Manager logout from service point
      parameters:
        - in: path
          name: managerId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Manager logged out successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagerStatus'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /managers/status:
    get:
      x-generated:
        package: servicepoint
      tags:
        - ServicePoint
      operationId: GetManagerStatus
      summary: Get status of all managers
      responses:
        '200':
          description: Manager status retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ManagerStatus'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /waiting-rooms/{roomId}/managers/status:
    get:
      x-generated:
        package: servicepoint
      tags:
        - ServicePoint
      operationId: GetManagerStatusForRoom
      summary: Get status of managers for a specific room
      parameters:
        - in: path
          name: roomId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Manager status for room retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ManagerStatus'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  # /waiting-rooms/{roomId}/service-points/{servicePointId}/call-next:
  #   post:
  #     x-generated:
  #       package: queue
  #     tags:
  #       - Queue
  #     operationId: CallNextForServicePoint
  #     summary: Call next person for a specific service point
  #     parameters:
  #       - in: path
  #         name: roomId
  #         required: true
  #         schema: { type: string }
  #       - in: path
  #         name: servicePointId
  #         required: true
  #         schema: { type: string }
  #     responses:
  #       '200':
  #         description: Next person called successfully
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/QueueEntry'
  #       '400':
  #         $ref: '#/components/responses/BadRequest'
  #       '500':
  #         $ref: '#/components/responses/InternalServerError'
  /waiting-rooms/{roomId}/service-points/{servicePointId}/mark-in-room:
    post:
      x-generated:
        package: queue
      tags:
        - Queue
      operationId: MarkInRoomForServicePoint
      summary: Mark person as in room for a specific service point
      parameters:
        - in: path
          name: roomId
          required: true
          schema: { type: string }
        - in: path
          name: servicePointId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MarkInRoomRequest'
      responses:
        '200':
          description: Person marked as in room successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueueEntry'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /waiting-rooms/{roomId}/service-points/{servicePointId}/finish-current:
    post:
      x-generated:
        package: queue
      tags:
        - Queue
      operationId: FinishCurrentForServicePoint
      summary: Finish current person for a specific service point
      parameters:
        - in: path
          name: roomId
          required: true
          schema: { type: string }
        - in: path
          name: servicePointId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Current person finished successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueueEntry'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /admin/configuration:
    get:
      x-generated:
        package: admin
      tags:
        - Admin
      operationId: GetSystemConfiguration
      summary: Get system configuration
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemConfiguration'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      x-generated:
        package: admin
      tags:
        - Admin
      operationId: UpdateSystemConfiguration
      summary: Update system configuration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemConfiguration'
      responses:
        '200':
          description: Configuration updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemConfiguration'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /admin/configuration/external-api:
    get:
      x-generated:
        package: admin
      tags:
        - Admin
      operationId: GetExternalAPIConfiguration
      summary: Get external API configuration
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalAPIConfig'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      x-generated:
        package: admin
      tags:
        - Admin
      operationId: UpdateExternalAPIConfiguration
      summary: Update external API configuration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalAPIConfig'
      responses:
        '200':
          description: External API configuration updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalAPIConfig'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /admin/configuration/rooms:
    get:
      x-generated:
        package: admin
      tags:
        - Admin
      operationId: GetRoomsConfiguration
      summary: Get rooms configuration
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoomConfig'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      x-generated:
        package: admin
      tags:
        - Admin
      operationId: UpdateRoomsConfiguration
      summary: Update rooms configuration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RoomConfig'
      responses:
        '200':
          description: Rooms configuration updated successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoomConfig'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /admin/card-readers:
    get:
      x-generated:
        package: admin
      tags:
        - Admin
      operationId: GetCardReaders
      summary: Get all card reader statuses
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CardReaderStatus'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /admin/card-readers/{id}/restart:
    post:
      x-generated:
        package: admin
      tags:
        - Admin
      operationId: RestartCardReader
      summary: Send restart signal to a card reader
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Restart signal sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestartResponse'
        '404':
          description: Card reader not found
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  securitySchemes:
    ApiKeyAuth: { type: apiKey, in: header, name: X-API-Key }
    BearerAuth: { type: http, scheme: bearer, bearerFormat: JWT }
  schemas:
    ConfigurationResponse:
      x-group: configuration
      title: ConfigurationResponse
      type: object
      required:
        - defaultRoom
        - allowWildcard
        - webSocketPath
        - rooms
      properties:
        defaultRoom:
          type: string
          description: Default room identifier
        allowWildcard:
          type: boolean
          description: Whether arbitrary room identifiers are accepted
        webSocketPath:
          type: string
          description: Base path for WebSocket connections
        rooms:
          type: array
          items:
            $ref: '#/components/schemas/RoomConfiguration'
    RoomConfiguration:
      x-group: configuration
      title: RoomConfiguration
      type: object
      required:
        - ID
        - name
        - servicePoints
      properties:
        ID:
          type: string
          description: Room identifier
        name:
          type: string
          description: Human readable room name
        servicePoints:
          type: array
          items:
            $ref: '#/components/schemas/ServicePointConfiguration'
    ServicePointConfiguration:
      x-group: configuration
      title: ServicePointConfiguration
      type: object
      required:
        - ID
        - name
      properties:
        ID:
          type: string
          description: Service point identifier
        name:
          type: string
          description: Display name for the service point
        description:
          type: string
          description: Optional description of the service point
        managerID:
          type: string
          description: Optional manager identifier associated with the service point
        managerName:
          type: string
          description: Optional manager name associated with the service point
    ServicePoint:
      x-group: queue
      title: ServicePoint
      type: object
      required:
        - ID
        - name
      properties:
        ID:
          type: string
          description: Unique identifier for the service point
        name:
          type: string
          description: Display name for the service point
        description:
          type: string
          description: Description of the service point
    QueueEntryStatus:
      x-group: queue
      title: QueueEntryStatus
      type: string
      enum: [WAITING, CALLED, IN_SERVICE, IN_ROOM, COMPLETED, SKIPPED, CANCELLED, NO_SHOW]
    SwipeRequest:
      x-group: kiosk
      title: SwipeRequest
      type: object
      required:
        - idCardRAW
      properties:
        idCardRaw:
          type: string
          description: Raw card data from card reader
        serviceId:
          type: string
          description: Selected service ID from user service selection
        serviceDuration:
          type: integer
          format: int64
          description: Duration of the selected service in minutes
    UserService:
      x-group: kiosk
      title: UserService
      type: object
      required:
        - serviceName
        - duration
        - id
      properties:
        serviceName:
          type: string
          description: Name of the service
        duration:
          type: integer
          format: int64
          description: Duration of the service in minutes
        id:
          type: string
          description: Unique identifier for the service
    JoinResult:
      x-group: kiosk
      title: JoinResult
      type: object
      required:
        - entryID
        - ticketNumber
        - qrUrl
      properties:
        entryID:
          type: string
          format: uuid
          description: Unique identifier for the queue entry
        ticketNumber:
          type: string
          example: "A-073"
          description: Generated ticket number
        qrUrl:
          type: string
          example: "http://localhost:4204/q/abc..."
          description: QR code URL for mobile app
        serviceDuration:
          type: integer
          format: int64
          description: Duration of the selected service in minutes
        serviceName:
          type: string
          description: Name of the selected service
    PublicEntry:
      x-group: queue
      title: PublicEntry
      type: object
      required:
        - entryID
        - ticketNumber
        - status
        - position
        - etaMinutes
        - canCancel
      properties:
        entryID:
          type: string
          format: uuid
          description: Unique identifier for the queue entry
        ticketNumber:
          type: string
          description: Ticket number
        status:
          $ref: '#/components/schemas/QueueEntryStatus'
        position:
          type: number
          format: int64
          minimum: 0
          description: Position in queue
        etaMinutes:
          type: number
          format: int64
          minimum: 0
          description: Estimated wait time in minutes
        canCancel:
          type: boolean
          description: Whether the entry can be cancelled
    QueueEntry:
      x-group: queue
      title: QueueEntry
      type: object
      required:
        - ID
        - waitingRoomID
        - ticketNumber
        - status
        - position
      properties:
        ID:
          type: string
          format: uuid
          description: Unique identifier
        waitingRoomID:
          type: string
          format: uuid
          description: Waiting room identifier
        ticketNumber:
          type: string
          description: Generated ticket number
        status:
          $ref: '#/components/schemas/QueueEntryStatus'
        position:
          type: number
          format: int64
          description: Position in queue
        servicePoint:
          type: string
          description: Service point identifier
        serviceName:
          type: string
          description: Name of the selected service
        serviceDuration:
          type: integer
          format: int64
          description: Duration of the selected service in minutes
    ManagerLoginRequest:
      x-group: servicepoint
      title: ManagerLoginRequest
      type: object
      required:
        - roomID
        - servicePointID
      properties:
        roomID:
          type: string
          description: Room ID where the manager is logging in
        servicePointID:
          type: string
          description: Service point ID where the manager is logging in
    ManagerStatus:
      x-group: servicepoint
      title: ManagerStatus
      type: object
      required:
        - managerID
        - managerName
        - servicePointID
        - roomID
        - isAvailable
        - lastSeen
      properties:
        managerID:
          type: string
          description: Unique identifier for the manager
        managerName:
          type: string
          description: Display name of the manager
        servicePointID:
          type: string
          description: Service point ID where the manager is assigned
        roomID:
          type: string
          description: Room ID where the manager is working
        isAvailable:
          type: boolean
          description: Whether the manager is currently available
        lastSeen:
          type: string
          format: date-time
          description: Last time the manager was seen (ISO 8601 format)
    MarkInRoomRequest:
      x-group: queue
      title: MarkInRoomRequest
      type: object
      required:
        - entryID
      properties:
        entryID:
          type: string
          description: ID of the entry to mark as in room
    SystemConfiguration:
      x-group: admin
      title: SystemConfiguration
      type: object
      required:
        - externalAPI
        - rooms
        - defaultRoom
        - webSocketPath
        - allowWildcard
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier
        externalAPI:
          $ref: '#/components/schemas/ExternalAPIConfig'
        rooms:
          type: array
          items:
            $ref: '#/components/schemas/RoomConfig'
        defaultRoom:
          type: string
          description: Default room ID
        webSocketPath:
          type: string
          description: WebSocket path
        allowWildcard:
          type: boolean
          description: Allow wildcard CORS
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
    RestartResponse:
      x-group: admin
      title: RestartResponse
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          description: Whether the restart signal was sent successfully
        message:
          type: string
          description: Response message
    ExternalAPIConfig:
      x-group: admin
      title: ExternalAPIConfig
      type: object
      required:
        - userServicesUrl
        - timeoutSeconds
        - retryAttempts
      properties:
        userServicesUrl:
          type: string
          description: External API URL for user services
        timeoutSeconds:
          type: integer
          format: int64
          description: Timeout in seconds
        retryAttempts:
          type: integer
          format: int64
          description: Number of retry attempts
        headers:
          type: object
          additionalProperties:
            type: string
          description: Custom headers to include in external API requests
          example:
            Authorization: "Bearer your-token-here"
            X-API-Key: "your-api-key"
            Content-Type: "application/json"
    RoomConfig:
      x-group: admin
      title: RoomConfig
      type: object
      required:
        - id
        - name
        - servicePoints
        - isDefault
      properties:
        id:
          type: string
          description: Room ID
        name:
          type: string
          description: Room name
        description:
          type: string
          description: Room description
        servicePoints:
          type: array
          items:
            $ref: '#/components/schemas/ServicePointConfig'
        isDefault:
          type: boolean
          description: Whether this is the default room
    ServicePointConfig:
      x-group: admin
      title: ServicePointConfig
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          description: Service point ID
        name:
          type: string
          description: Service point name
        description:
          type: string
          description: Service point description
        managerId:
          type: string
          description: Manager ID
        managerName:
          type: string
          description: Manager name
    CardReaderStatus:
      x-group: admin
      title: CardReaderStatus
      type: object
      required:
        - id
        - name
        - status
      properties:
        id:
          type: string
          description: Card reader ID
        name:
          type: string
          description: Card reader name
        status:
          type: string
          enum: [online, offline, error]
          description: Current status
        lastSeen:
          type: string
          format: date-time
          description: Last seen timestamp
        ipAddress:
          type: string
          description: IP address
        version:
          type: string
          description: Card reader version
        lastError:
          type: string
          description: Last error message
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
    ApplicationError:
      x-group: errors
      title: ApplicationError
      type: object
      description: The same type for all errors returned from API.
      required:
        - text
        - code
      properties:
        text:
          type: string
          description: Error message
        code:
          type: string
          description: Error code
          enum:
            - BUSINESS_ERROR
            - VALIDATION_ERROR
            - MISSING_REQUIRED_FIELD_ERROR
            - OBJECT_VERSION_MISMATCH_ERROR
            - NOT_FOUND_ERROR
            - SERVICE_CALL_ERROR
            - FORBIDDEN_ERROR
            - INTERNAL_SERVER_ERROR
            - MISSING_TENANT
            - AUTH_HEADER
            - UNPROCESSABLE_ENTITY_FOREIGN_KEY
            - UNPROCESSABLE_ENTITY_UNIQUE
            - QUEUE_ENTRY_NOT_FOUND
            - INVALID_ROOM_ID
            - CARD_READ_FAILED
            - QUEUE_EMPTY
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApplicationError'
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApplicationError'
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApplicationError'
