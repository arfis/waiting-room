// Code generated by go generate; DO NOT EDIT.
package utils

func Contains[T comparable](elements []T, v T) bool {
	for _, s := range elements {
		if v == s {
			return true
		}
	}
	return false
}

func Any[T comparable](elements []T, v ...T) bool {
	l := len(v)
	if l == 0 {
		return false
	}

	if l == 1 {
		return Contains[T](elements, v[0])
	}

	m := make(map[T]any)
	for _, e := range elements {
		m[e] = struct{}{}
	}

	for _, a := range v {
		if _, ok := m[a]; ok {
			return true
		}
	}
	return false
}

func Remove[T comparable](elements []T, index int) []T {
	return append(elements[:index], elements[index+1:]...)
}

func RemoveByValue[T comparable](elements []T, value T) []T {
	for i := 0; i < len(elements); i++ {
		if value == elements[i] {
			elements = Remove(elements, i)
			i--
		}
	}
	return elements
}
