// Code generated by go generate; DO NOT EDIT.
package dto

import "time"

type CardReaderStatus struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Id        string     `json:"id" validate:"required"`
	IpAddress *string    `json:"ipAddress,omitempty"`
	LastError *string    `json:"lastError,omitempty"`
	LastSeen  *time.Time `json:"lastSeen,omitempty"`
	Name      string     `json:"name" validate:"required"`
	Status    string     `json:"status" validate:"required"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	Version   *string    `json:"version,omitempty"`
}

func (cardReaderStatus CardReaderStatus) GetCreatedAt() time.Time {
	var v time.Time
	if cardReaderStatus.CreatedAt != nil {
		return *cardReaderStatus.CreatedAt
	}
	return v
}

func (cardReaderStatus CardReaderStatus) GetId() string {
	return cardReaderStatus.Id
}

func (cardReaderStatus CardReaderStatus) GetIpAddress() string {
	var v string
	if cardReaderStatus.IpAddress != nil {
		return *cardReaderStatus.IpAddress
	}
	return v
}

func (cardReaderStatus CardReaderStatus) GetLastError() string {
	var v string
	if cardReaderStatus.LastError != nil {
		return *cardReaderStatus.LastError
	}
	return v
}

func (cardReaderStatus CardReaderStatus) GetLastSeen() time.Time {
	var v time.Time
	if cardReaderStatus.LastSeen != nil {
		return *cardReaderStatus.LastSeen
	}
	return v
}

func (cardReaderStatus CardReaderStatus) GetName() string {
	return cardReaderStatus.Name
}

func (cardReaderStatus CardReaderStatus) GetStatus() string {
	return cardReaderStatus.Status
}

func (cardReaderStatus CardReaderStatus) GetUpdatedAt() time.Time {
	var v time.Time
	if cardReaderStatus.UpdatedAt != nil {
		return *cardReaderStatus.UpdatedAt
	}
	return v
}

func (cardReaderStatus CardReaderStatus) GetVersion() string {
	var v string
	if cardReaderStatus.Version != nil {
		return *cardReaderStatus.Version
	}
	return v
}

type ExternalAPIConfig struct {
	RetryAttempts          int64             `json:"retryAttempts"`
	TimeoutSeconds         int64             `json:"timeoutSeconds"`
	AppointmentServicesUrl *string           `json:"appointmentServicesUrl,omitempty"`
	GenericServicesUrl     *string           `json:"genericServicesUrl,omitempty"`
	GenericServices        []GenericService  `json:"genericServices,omitempty"`
	WebhookUrl             *string           `json:"webhookUrl,omitempty"`
	WebhookTimeoutSeconds  *int64            `json:"webhookTimeoutSeconds,omitempty"`
	WebhookRetryAttempts   *int64            `json:"webhookRetryAttempts,omitempty"`
	Headers                map[string]string `json:"headers,omitempty"`
}

type GenericService struct {
	Id          string `json:"id" validate:"required"`
	Name        string `json:"name" validate:"required"`
	Description string `json:"description,omitempty"`
	Duration    int    `json:"duration,omitempty"` // Duration in minutes
	Enabled     bool   `json:"enabled"`
}

func (externalAPIConfig ExternalAPIConfig) GetRetryAttempts() int64 {
	return externalAPIConfig.RetryAttempts
}

func (externalAPIConfig ExternalAPIConfig) GetTimeoutSeconds() int64 {
	return externalAPIConfig.TimeoutSeconds
}

func (externalAPIConfig ExternalAPIConfig) GetHeaders() map[string]string {
	return externalAPIConfig.Headers
}

func (externalAPIConfig ExternalAPIConfig) GetAppointmentServicesUrl() string {
	var v string
	if externalAPIConfig.AppointmentServicesUrl != nil {
		return *externalAPIConfig.AppointmentServicesUrl
	}
	return v
}

func (externalAPIConfig ExternalAPIConfig) GetGenericServicesUrl() string {
	var v string
	if externalAPIConfig.GenericServicesUrl != nil {
		return *externalAPIConfig.GenericServicesUrl
	}
	return v
}

func (externalAPIConfig ExternalAPIConfig) GetWebhookUrl() string {
	var v string
	if externalAPIConfig.WebhookUrl != nil {
		return *externalAPIConfig.WebhookUrl
	}
	return v
}

func (externalAPIConfig ExternalAPIConfig) GetWebhookTimeoutSeconds() int64 {
	var v int64
	if externalAPIConfig.WebhookTimeoutSeconds != nil {
		return *externalAPIConfig.WebhookTimeoutSeconds
	}
	return v
}

func (externalAPIConfig ExternalAPIConfig) GetWebhookRetryAttempts() int64 {
	var v int64
	if externalAPIConfig.WebhookRetryAttempts != nil {
		return *externalAPIConfig.WebhookRetryAttempts
	}
	return v
}

func (genericService GenericService) GetId() string {
	return genericService.Id
}

func (genericService GenericService) GetName() string {
	return genericService.Name
}

func (genericService GenericService) GetDescription() string {
	return genericService.Description
}

func (genericService GenericService) GetDuration() int {
	return genericService.Duration
}

func (genericService GenericService) GetEnabled() bool {
	return genericService.Enabled
}

type RestartResponse struct {
	Message string `json:"message" validate:"required"`
	Success bool   `json:"success"`
}

func (restartResponse RestartResponse) GetMessage() string {
	return restartResponse.Message
}

func (restartResponse RestartResponse) GetSuccess() bool {
	return restartResponse.Success
}

type RoomConfig struct {
	Description   *string              `json:"description,omitempty"`
	Id            string               `json:"id" validate:"required"`
	IsDefault     bool                 `json:"isDefault"`
	Name          string               `json:"name" validate:"required"`
	ServicePoints []ServicePointConfig `json:"servicePoints" validate:"required,dive"`
}

func (roomConfig RoomConfig) GetDescription() string {
	var v string
	if roomConfig.Description != nil {
		return *roomConfig.Description
	}
	return v
}

func (roomConfig RoomConfig) GetId() string {
	return roomConfig.Id
}

func (roomConfig RoomConfig) GetIsDefault() bool {
	return roomConfig.IsDefault
}

func (roomConfig RoomConfig) GetName() string {
	return roomConfig.Name
}

func (roomConfig RoomConfig) GetServicePoints() []ServicePointConfig {
	return roomConfig.ServicePoints
}

type ServicePointConfig struct {
	Description *string `json:"description,omitempty"`
	Id          string  `json:"id" validate:"required"`
	ManagerId   *string `json:"managerId,omitempty"`
	ManagerName *string `json:"managerName,omitempty"`
	Name        string  `json:"name" validate:"required"`
}

func (servicePointConfig ServicePointConfig) GetDescription() string {
	var v string
	if servicePointConfig.Description != nil {
		return *servicePointConfig.Description
	}
	return v
}

func (servicePointConfig ServicePointConfig) GetId() string {
	return servicePointConfig.Id
}

func (servicePointConfig ServicePointConfig) GetManagerId() string {
	var v string
	if servicePointConfig.ManagerId != nil {
		return *servicePointConfig.ManagerId
	}
	return v
}

func (servicePointConfig ServicePointConfig) GetManagerName() string {
	var v string
	if servicePointConfig.ManagerName != nil {
		return *servicePointConfig.ManagerName
	}
	return v
}

func (servicePointConfig ServicePointConfig) GetName() string {
	return servicePointConfig.Name
}

type SystemConfiguration struct {
	AllowWildcard bool               `json:"allowWildcard"`
	CreatedAt     *time.Time         `json:"createdAt,omitempty"`
	DefaultRoom   string             `json:"defaultRoom" validate:"required"`
	ExternalAPI   *ExternalAPIConfig `json:"externalAPI" validate:"required"`
	Id            *string            `json:"id,omitempty"`
	Rooms         []RoomConfig       `json:"rooms" validate:"required,dive"`
	UpdatedAt     *time.Time         `json:"updatedAt,omitempty"`
	WebSocketPath string             `json:"webSocketPath" validate:"required"`
}

func (systemConfiguration SystemConfiguration) GetAllowWildcard() bool {
	return systemConfiguration.AllowWildcard
}

func (systemConfiguration SystemConfiguration) GetCreatedAt() time.Time {
	var v time.Time
	if systemConfiguration.CreatedAt != nil {
		return *systemConfiguration.CreatedAt
	}
	return v
}

func (systemConfiguration SystemConfiguration) GetDefaultRoom() string {
	return systemConfiguration.DefaultRoom
}

func (systemConfiguration SystemConfiguration) GetExternalAPI() ExternalAPIConfig {
	var v ExternalAPIConfig
	if systemConfiguration.ExternalAPI != nil {
		return *systemConfiguration.ExternalAPI
	}
	return v
}

func (systemConfiguration SystemConfiguration) GetId() string {
	var v string
	if systemConfiguration.Id != nil {
		return *systemConfiguration.Id
	}
	return v
}

func (systemConfiguration SystemConfiguration) GetRooms() []RoomConfig {
	return systemConfiguration.Rooms
}

func (systemConfiguration SystemConfiguration) GetUpdatedAt() time.Time {
	var v time.Time
	if systemConfiguration.UpdatedAt != nil {
		return *systemConfiguration.UpdatedAt
	}
	return v
}

func (systemConfiguration SystemConfiguration) GetWebSocketPath() string {
	return systemConfiguration.WebSocketPath
}
