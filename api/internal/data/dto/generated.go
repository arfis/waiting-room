// Code generated by go generate; DO NOT EDIT.
package dto

import (
	"encoding/xml"
	"errors"
	"strconv"
	"time"
)

const (
	timeOnly            = "15:04:05"
	dateOnly            = "2006-01-02"
	dateTimeWithoutZone = "2006-01-02T15:04:05"
)

type LocalTime struct {
	time.Time
}

type LocalDate struct {
	time.Time
}

type LocalDateTime struct {
	time.Time
}

func (lt *LocalTime) UnmarshalJSON(b []byte) (err error) {
	s := string(b)

	s, _ = strconv.Unquote(s)
	t, err := time.Parse(timeOnly, s)
	if err != nil {
		return errors.New("unable to unmarshal JSON")
	}
	lt.Time = t
	return nil
}

func (lt *LocalTime) UnmarshalXML(decoder *xml.Decoder, start xml.StartElement) (err error) {
	var value string

	err = decoder.DecodeElement(&value, &start)
	if err != nil {
		return errors.New("unable to decode XML")
	}
	parsedTime, err := time.Parse(timeOnly, value)
	if err != nil {
		return errors.New("unable to unmarshal XML")
	}
	lt.Time = parsedTime
	return nil
}

func (lt LocalTime) MarshalJSON() (array []byte, err error) {
	s := lt.Format(timeOnly)
	array = []byte(strconv.Quote(s))
	return array, nil
}

func (lt LocalTime) MarshalXML(encoder *xml.Encoder, start xml.StartElement) error {
	return encoder.EncodeElement(lt.Format(timeOnly), start)
}

func (ld *LocalDate) UnmarshalJSON(b []byte) (err error) {
	s := string(b)

	s, _ = strconv.Unquote(s)
	t, err := time.Parse(dateOnly, s)
	if err != nil {
		return errors.New("unable to unmarshal JSON")
	}
	ld.Time = t
	return nil
}

func (ld *LocalDate) UnmarshalXML(decoder *xml.Decoder, start xml.StartElement) (err error) {
	var value string

	err = decoder.DecodeElement(&value, &start)
	if err != nil {
		return errors.New("unable to decode XML")
	}
	parsedTime, err := time.Parse(dateOnly, value)
	if err != nil {
		return errors.New("unable to unmarshal XML")
	}
	ld.Time = parsedTime
	return nil
}

func (ld LocalDate) MarshalJSON() (array []byte, err error) {
	s := ld.Format(dateOnly)
	array = []byte(strconv.Quote(s))
	return array, nil
}

func (ld LocalDate) MarshalXML(encoder *xml.Encoder, start xml.StartElement) error {
	return encoder.EncodeElement(ld.Format(dateOnly), start)
}

func (ldt *LocalDateTime) UnmarshalJSON(b []byte) (err error) {
	s := string(b)

	s, _ = strconv.Unquote(s)
	t, err := time.Parse(dateTimeWithoutZone, s)
	if err != nil {
		return errors.New("unable to unmarshal JSON")
	}
	ldt.Time = t
	return nil
}

func (ldt *LocalDateTime) UnmarshalXML(decoder *xml.Decoder, start xml.StartElement) (err error) {
	var value string

	err = decoder.DecodeElement(&value, &start)
	if err != nil {
		return errors.New("unable to decode XML")
	}
	parsedTime, err := time.Parse(dateTimeWithoutZone, value)
	if err != nil {
		return errors.New("unable to unmarshal XML")
	}
	ldt.Time = parsedTime
	return nil
}

func (ldt LocalDateTime) MarshalJSON() (array []byte, err error) {
	s := ldt.Format(dateTimeWithoutZone)
	array = []byte(strconv.Quote(s))
	return array, nil
}

func (ldt LocalDateTime) MarshalXML(encoder *xml.Encoder, start xml.StartElement) error {
	return encoder.EncodeElement(ldt.Format(dateTimeWithoutZone), start)
}
