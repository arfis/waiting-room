// Code generated by go generate; DO NOT EDIT.
package register

import (
	"log"

	"github.com/arfis/waiting-room/internal/middleware"
	"github.com/arfis/waiting-room/internal/rest/handler/kiosk"
	"github.com/arfis/waiting-room/internal/rest/handler/queue"
	"github.com/go-chi/chi/v5"
	"go.uber.org/dig"
)

func Generated(r chi.Router, diContainer *dig.Container) {
	err := diContainer.Invoke(func(
		queueHandler *queue.Handler,
		kioskHandler *kiosk.Handler,
		authorizationMiddleware *middleware.AuthorizationMiddleware,
	) error {
		log.Println("Successfully injected dependencies for route registration")
		log.Printf("Queue handler: %v", queueHandler != nil)
		log.Printf("Kiosk handler: %v", kioskHandler != nil)
		log.Printf("Auth middleware: %v", authorizationMiddleware != nil)

		// Protected routes (require JWT)
		r.With(authorizationMiddleware.Middleware()).Group(func(protected chi.Router) {
			protected.Get("/queue-entries/token/{qrToken}", queueHandler.GetQueueEntryByToken)
			protected.Post("/waiting-rooms/{roomId}/finish", queueHandler.FinishCurrent)
			protected.Post("/waiting-rooms/{roomId}/next", queueHandler.CallNext)
			protected.Get("/waiting-rooms/{roomId}/queue", queueHandler.GetQueueEntries)
			protected.Post("/waiting-rooms/{roomId}/swipe", kioskHandler.SwipeCard)

		})

		return nil
	})

	if err != nil {
		log.Printf("Dependency injection failed: %v", err)
		panic(err)
	}
}
