// Code generated by go generate; DO NOT EDIT.
package admin

import (
	"encoding/json"
	"net/http"

	"github.com/arfis/waiting-room/internal/data/dto"
	ngErrors "github.com/arfis/waiting-room/internal/errors"
	"github.com/arfis/waiting-room/internal/rest/handler"
	"github.com/arfis/waiting-room/internal/service/admin"
)

type Handler struct {
	svc                  *admin.Service
	responseErrorHandler *ngErrors.ResponseErrorHandler
}

func New(
	svc *admin.Service,
	responseErrorHandler *ngErrors.ResponseErrorHandler,
) *Handler {
	return &Handler{
		svc:                  svc,
		responseErrorHandler: responseErrorHandler,
	}
}

func (h *Handler) GetCardReaders(w http.ResponseWriter, r *http.Request) {
	var applicationErr error
	var resp []dto.CardReaderStatus
	resp, applicationErr = h.svc.GetCardReaders(
		r.Context(),
	)
	if applicationErr != nil {
		h.responseErrorHandler.HandleAndWriteError(w, r, applicationErr)
		return
	}
	handler.WriteJson(r.Context(), w, 200, resp)
}

func (h *Handler) RestartCardReader(w http.ResponseWriter, r *http.Request) {
	var applicationErr error
	id := handler.PathParamToString(r, "id")
	var resp *dto.RestartResponse
	resp, applicationErr = h.svc.RestartCardReader(
		r.Context(),
		id,
	)
	if applicationErr != nil {
		h.responseErrorHandler.HandleAndWriteError(w, r, applicationErr)
		return
	}
	handler.WriteJson(r.Context(), w, 200, resp)
}

func (h *Handler) GetSystemConfiguration(w http.ResponseWriter, r *http.Request) {
	var applicationErr error
	var resp *dto.SystemConfiguration
	resp, applicationErr = h.svc.GetSystemConfiguration(
		r.Context(),
	)
	if applicationErr != nil {
		h.responseErrorHandler.HandleAndWriteError(w, r, applicationErr)
		return
	}
	handler.WriteJson(r.Context(), w, 200, resp)
}

func (h *Handler) UpdateSystemConfiguration(w http.ResponseWriter, r *http.Request) {
	var applicationErr error
	req := dto.SystemConfiguration{}
	applicationErr = json.NewDecoder(r.Body).Decode(&req)
	if applicationErr != nil {
		h.responseErrorHandler.HandleAndWriteError(w, r, ngErrors.New(ngErrors.InternalServerErrorCode, "problem decoding request body", http.StatusInternalServerError, nil))
		return
	}
	applicationErr = handler.GetValidator().Struct(req)
	if applicationErr != nil {
		h.responseErrorHandler.HandleAndWriteError(w, r, ngErrors.RequestValidation(applicationErr))
		return
	}
	var resp *dto.SystemConfiguration
	resp, applicationErr = h.svc.UpdateSystemConfiguration(
		r.Context(), &req,
	)
	if applicationErr != nil {
		h.responseErrorHandler.HandleAndWriteError(w, r, applicationErr)
		return
	}
	handler.WriteJson(r.Context(), w, 200, resp)
}

func (h *Handler) GetExternalAPIConfiguration(w http.ResponseWriter, r *http.Request) {
	var applicationErr error
	var resp *dto.ExternalAPIConfig
	resp, applicationErr = h.svc.GetExternalAPIConfiguration(
		r.Context(),
	)
	if applicationErr != nil {
		h.responseErrorHandler.HandleAndWriteError(w, r, applicationErr)
		return
	}
	handler.WriteJson(r.Context(), w, 200, resp)
}

func (h *Handler) UpdateExternalAPIConfiguration(w http.ResponseWriter, r *http.Request) {
	var applicationErr error
	req := dto.ExternalAPIConfig{}
	applicationErr = json.NewDecoder(r.Body).Decode(&req)
	if applicationErr != nil {
		h.responseErrorHandler.HandleAndWriteError(w, r, ngErrors.New(ngErrors.InternalServerErrorCode, "problem decoding request body", http.StatusInternalServerError, nil))
		return
	}
	applicationErr = handler.GetValidator().Struct(req)
	if applicationErr != nil {
		h.responseErrorHandler.HandleAndWriteError(w, r, ngErrors.RequestValidation(applicationErr))
		return
	}
	var resp *dto.ExternalAPIConfig
	resp, applicationErr = h.svc.UpdateExternalAPIConfiguration(
		r.Context(), &req,
	)
	if applicationErr != nil {
		h.responseErrorHandler.HandleAndWriteError(w, r, applicationErr)
		return
	}
	handler.WriteJson(r.Context(), w, 200, resp)
}

func (h *Handler) GetRoomsConfiguration(w http.ResponseWriter, r *http.Request) {
	var applicationErr error
	var resp []dto.RoomConfig
	resp, applicationErr = h.svc.GetRoomsConfiguration(
		r.Context(),
	)
	if applicationErr != nil {
		h.responseErrorHandler.HandleAndWriteError(w, r, applicationErr)
		return
	}
	handler.WriteJson(r.Context(), w, 200, resp)
}

func (h *Handler) UpdateRoomsConfiguration(w http.ResponseWriter, r *http.Request) {
	var applicationErr error
	var resp []dto.RoomConfig
	req := []dto.RoomConfig{}
	applicationErr = json.NewDecoder(r.Body).Decode(&req)
	if applicationErr != nil {
		h.responseErrorHandler.HandleAndWriteError(w, r, ngErrors.New(ngErrors.InternalServerErrorCode, "problem decoding request body", http.StatusInternalServerError, nil))
		return
	}
	for _, item := range req {
		applicationErr = handler.GetValidator().Struct(item)
		if applicationErr != nil {
			h.responseErrorHandler.HandleAndWriteError(w, r, ngErrors.RequestValidation(applicationErr))
			return
		}
	}
	resp, applicationErr = h.svc.UpdateRoomsConfiguration(
		r.Context(),
		req,
	)
	if applicationErr != nil {
		h.responseErrorHandler.HandleAndWriteError(w, r, applicationErr)
		return
	}
	handler.WriteJson(r.Context(), w, 200, resp)
}

func (h *Handler) ClearTranslationCache(w http.ResponseWriter, r *http.Request) {
	var applicationErr error
	var resp *dto.CacheClearResponse
	resp, applicationErr = h.svc.ClearTranslationCache(
		r.Context(),
	)
	if applicationErr != nil {
		h.responseErrorHandler.HandleAndWriteError(w, r, applicationErr)
		return
	}
	handler.WriteJson(r.Context(), w, 200, resp)
}

func (h *Handler) GetTranslationCacheStats(w http.ResponseWriter, r *http.Request) {
	var applicationErr error
	var resp *dto.TranslationCacheStats
	resp, applicationErr = h.svc.GetTranslationCacheStats(
		r.Context(),
	)
	if applicationErr != nil {
		h.responseErrorHandler.HandleAndWriteError(w, r, applicationErr)
		return
	}
	handler.WriteJson(r.Context(), w, 200, resp)
}
