// Code generated by go generate; DO NOT EDIT.
package queue

import (
	"encoding/json"
	"github.com/arfis/waiting-room/internal/data/dto"
	ngErrors "github.com/arfis/waiting-room/internal/errors"
	"github.com/arfis/waiting-room/internal/rest/handler"
	"github.com/arfis/waiting-room/internal/service/queue"
	"net/http"
)

type Handler struct {
	svc                  *queue.Service
	responseErrorHandler *ngErrors.ResponseErrorHandler
}

func New(
	svc *queue.Service,
	responseErrorHandler *ngErrors.ResponseErrorHandler,
) *Handler {
	return &Handler{
		svc:                  svc,
		responseErrorHandler: responseErrorHandler,
	}
}

func (h *Handler) GetQueueEntryByToken(w http.ResponseWriter, r *http.Request) {
	var applicationErr error
	qrToken := handler.PathParamToString(r, "qrToken")
	var resp *dto.PublicEntry
	resp, applicationErr = h.svc.GetQueueEntryByToken(
		r.Context(),
		qrToken,
	)
	if applicationErr != nil {
		h.responseErrorHandler.HandleAndWriteError(w, r, applicationErr)
		return
	}
	handler.WriteJson(r.Context(), w, 200, resp)
}

func (h *Handler) FinishCurrent(w http.ResponseWriter, r *http.Request) {
	var applicationErr error
	roomId := handler.PathParamToString(r, "roomId")
	var resp *dto.QueueEntry
	resp, applicationErr = h.svc.FinishCurrent(
		r.Context(),
		roomId,
	)
	if applicationErr != nil {
		h.responseErrorHandler.HandleAndWriteError(w, r, applicationErr)
		return
	}
	handler.WriteJson(r.Context(), w, 200, resp)
}

func (h *Handler) GetQueueEntries(w http.ResponseWriter, r *http.Request) {
	var applicationErr error
	roomId := handler.PathParamToString(r, "roomId")
	state := handler.QueryParamToArrayString(r, "state")
	var resp []dto.QueueEntry
	resp, applicationErr = h.svc.GetQueueEntries(
		r.Context(),
		roomId,
		state,
	)
	if applicationErr != nil {
		h.responseErrorHandler.HandleAndWriteError(w, r, applicationErr)
		return
	}
	handler.WriteJson(r.Context(), w, 200, resp)
}

func (h *Handler) GetServicePoints(w http.ResponseWriter, r *http.Request) {
	var applicationErr error
	roomId := handler.PathParamToString(r, "roomId")
	var resp []dto.ServicePoint
	resp, applicationErr = h.svc.GetServicePoints(
		r.Context(),
		roomId,
	)
	if applicationErr != nil {
		h.responseErrorHandler.HandleAndWriteError(w, r, applicationErr)
		return
	}
	handler.WriteJson(r.Context(), w, 200, resp)
}

func (h *Handler) FinishCurrentForServicePoint(w http.ResponseWriter, r *http.Request) {
	var applicationErr error
	roomId := handler.PathParamToString(r, "roomId")
	servicePointId := handler.PathParamToString(r, "servicePointId")
	var resp *dto.QueueEntry
	resp, applicationErr = h.svc.FinishCurrentForServicePoint(
		r.Context(),
		roomId,
		servicePointId,
	)
	if applicationErr != nil {
		h.responseErrorHandler.HandleAndWriteError(w, r, applicationErr)
		return
	}
	handler.WriteJson(r.Context(), w, 200, resp)
}

func (h *Handler) MarkInRoomForServicePoint(w http.ResponseWriter, r *http.Request) {
	var applicationErr error
	roomId := handler.PathParamToString(r, "roomId")
	servicePointId := handler.PathParamToString(r, "servicePointId")
	req := dto.MarkInRoomRequest{}
	applicationErr = json.NewDecoder(r.Body).Decode(&req)
	if applicationErr != nil {
		h.responseErrorHandler.HandleAndWriteError(w, r, ngErrors.New(ngErrors.InternalServerErrorCode, "problem decoding request body", http.StatusInternalServerError, nil))
		return
	}
	applicationErr = handler.GetValidator().Struct(req)
	if applicationErr != nil {
		h.responseErrorHandler.HandleAndWriteError(w, r, ngErrors.RequestValidation(applicationErr))
		return
	}
	var resp *dto.QueueEntry
	resp, applicationErr = h.svc.MarkInRoomForServicePoint(
		r.Context(),
		roomId,
		servicePointId, &req,
	)
	if applicationErr != nil {
		h.responseErrorHandler.HandleAndWriteError(w, r, applicationErr)
		return
	}
	handler.WriteJson(r.Context(), w, 200, resp)
}

func (h *Handler) CallNext(w http.ResponseWriter, r *http.Request) {
	var applicationErr error
	roomId := handler.PathParamToString(r, "roomId")
	servicePointId := handler.PathParamToString(r, "servicePointId")
	var resp *dto.QueueEntry
	resp, applicationErr = h.svc.CallNext(
		r.Context(),
		roomId,
		servicePointId,
	)
	if applicationErr != nil {
		h.responseErrorHandler.HandleAndWriteError(w, r, applicationErr)
		return
	}
	handler.WriteJson(r.Context(), w, 200, resp)
}
