// Code generated by go generate; DO NOT EDIT.
package servicepoint

import (
	"encoding/json"
	"github.com/arfis/waiting-room/internal/data/dto"
	ngErrors "github.com/arfis/waiting-room/internal/errors"
	"github.com/arfis/waiting-room/internal/rest/handler"
	"github.com/arfis/waiting-room/internal/service/servicepoint"
	"net/http"
)

type Handler struct {
	svc                  *servicepoint.Service
	responseErrorHandler *ngErrors.ResponseErrorHandler
}

func New(
	svc *servicepoint.Service,
	responseErrorHandler *ngErrors.ResponseErrorHandler,
) *Handler {
	return &Handler{
		svc:                  svc,
		responseErrorHandler: responseErrorHandler,
	}
}

func (h *Handler) GetManagerStatus(w http.ResponseWriter, r *http.Request) {
	var applicationErr error
	var resp []dto.ManagerStatus
	resp, applicationErr = h.svc.GetManagerStatus(
		r.Context(),
	)
	if applicationErr != nil {
		h.responseErrorHandler.HandleAndWriteError(w, r, applicationErr)
		return
	}
	handler.WriteJson(r.Context(), w, 200, resp)
}

func (h *Handler) ManagerLogin(w http.ResponseWriter, r *http.Request) {
	var applicationErr error
	managerId := handler.PathParamToString(r, "managerId")
	req := dto.ManagerLoginRequest{}
	applicationErr = json.NewDecoder(r.Body).Decode(&req)
	if applicationErr != nil {
		h.responseErrorHandler.HandleAndWriteError(w, r, ngErrors.New(ngErrors.InternalServerErrorCode, "problem decoding request body", http.StatusInternalServerError, nil))
		return
	}
	applicationErr = handler.GetValidator().Struct(req)
	if applicationErr != nil {
		h.responseErrorHandler.HandleAndWriteError(w, r, ngErrors.RequestValidation(applicationErr))
		return
	}
	var resp *dto.ManagerStatus
	resp, applicationErr = h.svc.ManagerLogin(
		r.Context(),
		managerId, &req,
	)
	if applicationErr != nil {
		h.responseErrorHandler.HandleAndWriteError(w, r, applicationErr)
		return
	}
	handler.WriteJson(r.Context(), w, 200, resp)
}

func (h *Handler) ManagerLogout(w http.ResponseWriter, r *http.Request) {
	var applicationErr error
	managerId := handler.PathParamToString(r, "managerId")
	var resp *dto.ManagerStatus
	resp, applicationErr = h.svc.ManagerLogout(
		r.Context(),
		managerId,
	)
	if applicationErr != nil {
		h.responseErrorHandler.HandleAndWriteError(w, r, applicationErr)
		return
	}
	handler.WriteJson(r.Context(), w, 200, resp)
}

func (h *Handler) GetManagerStatusForRoom(w http.ResponseWriter, r *http.Request) {
	var applicationErr error
	roomId := handler.PathParamToString(r, "roomId")
	var resp []dto.ManagerStatus
	resp, applicationErr = h.svc.GetManagerStatusForRoom(
		r.Context(),
		roomId,
	)
	if applicationErr != nil {
		h.responseErrorHandler.HandleAndWriteError(w, r, applicationErr)
		return
	}
	handler.WriteJson(r.Context(), w, 200, resp)
}
