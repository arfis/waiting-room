// Code generated by go generate; DO NOT EDIT.
package kiosk

import (
	"encoding/json"
	"github.com/arfis/waiting-room/internal/data/dto"
	ngErrors "github.com/arfis/waiting-room/internal/errors"
	"github.com/arfis/waiting-room/internal/rest/handler"
	"github.com/arfis/waiting-room/internal/service/kiosk"
	"net/http"
)

type Handler struct {
	svc                  *kiosk.Service
	responseErrorHandler *ngErrors.ResponseErrorHandler
}

func New(
	svc *kiosk.Service,
	responseErrorHandler *ngErrors.ResponseErrorHandler,
) *Handler {
	return &Handler{
		svc:                  svc,
		responseErrorHandler: responseErrorHandler,
	}
}

func (h *Handler) GetAppointmentServices(w http.ResponseWriter, r *http.Request) {
	var applicationErr error
	identifier := handler.QueryParamToString(r, "identifier")
	language := handler.QueryOptionalParamToString(r, "language")
	var resp []dto.UserService
	resp, applicationErr = h.svc.GetAppointmentServices(
		r.Context(),
		identifier,
		language,
	)
	if applicationErr != nil {
		h.responseErrorHandler.HandleAndWriteError(w, r, applicationErr)
		return
	}
	handler.WriteJson(r.Context(), w, 200, resp)
}

func (h *Handler) GetDefaultServicePoint(w http.ResponseWriter, r *http.Request) {
	var applicationErr error
	roomId := handler.QueryParamToString(r, "roomId")
	var resp *string
	resp, applicationErr = h.svc.GetDefaultServicePoint(
		r.Context(),
		roomId,
	)
	if applicationErr != nil {
		h.responseErrorHandler.HandleAndWriteError(w, r, applicationErr)
		return
	}
	handler.WriteJson(r.Context(), w, 200, resp)
}

func (h *Handler) GetGenericServices(w http.ResponseWriter, r *http.Request) {
	var applicationErr error
	language := handler.QueryOptionalParamToString(r, "language")
	var resp []dto.UserService
	resp, applicationErr = h.svc.GetGenericServices(
		r.Context(),
		language,
	)
	if applicationErr != nil {
		h.responseErrorHandler.HandleAndWriteError(w, r, applicationErr)
		return
	}
	handler.WriteJson(r.Context(), w, 200, resp)
}

func (h *Handler) GetUserServices(w http.ResponseWriter, r *http.Request) {
	var applicationErr error
	identifier := handler.QueryParamToString(r, "identifier")
	language := handler.QueryOptionalParamToString(r, "language")
	var resp []dto.UserService
	resp, applicationErr = h.svc.GetUserServices(
		r.Context(),
		identifier,
		language,
	)
	if applicationErr != nil {
		h.responseErrorHandler.HandleAndWriteError(w, r, applicationErr)
		return
	}
	handler.WriteJson(r.Context(), w, 200, resp)
}

func (h *Handler) SwipeCard(w http.ResponseWriter, r *http.Request) {
	var applicationErr error
	roomId := handler.PathParamToString(r, "roomId")
	req := dto.SwipeRequest{}
	applicationErr = json.NewDecoder(r.Body).Decode(&req)
	if applicationErr != nil {
		h.responseErrorHandler.HandleAndWriteError(w, r, ngErrors.New(ngErrors.InternalServerErrorCode, "problem decoding request body", http.StatusInternalServerError, nil))
		return
	}
	applicationErr = handler.GetValidator().Struct(req)
	if applicationErr != nil {
		h.responseErrorHandler.HandleAndWriteError(w, r, ngErrors.RequestValidation(applicationErr))
		return
	}
	var resp *dto.JoinResult
	resp, applicationErr = h.svc.SwipeCard(
		r.Context(),
		roomId, &req,
	)
	if applicationErr != nil {
		h.responseErrorHandler.HandleAndWriteError(w, r, applicationErr)
		return
	}
	handler.WriteJson(r.Context(), w, 201, resp)
}
