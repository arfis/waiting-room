// Code generated by go generate; DO NOT EDIT.
package errors

import (
	"encoding/json"
	"errors"
	"log/slog"
	"net/http"
)

type ResponseErrorHandler struct {
	logger *slog.Logger
}

func NewResponseErrorHandler(logger *slog.Logger) *ResponseErrorHandler {
	return &ResponseErrorHandler{
		logger: logger,
	}
}

func (h *ResponseErrorHandler) HandleAndWriteError(w http.ResponseWriter, r *http.Request, err error) {
	var body []byte
	var httpCode int = http.StatusInternalServerError
	var appErr *ApplicationError

	h.logger.Error("error occurred", "error", err)

	if errors.As(err, &appErr) {
		httpCode = appErr.HttpCode
		errBody, marshalErr := json.Marshal(appErr)
		if marshalErr != nil {
			h.logger.Error("cannot marshal json", "error", marshalErr)
		} else {
			body = errBody
		}
	} else {
		errBody, marshalErr := json.Marshal(ApplicationError{
			Code:     InternalServerErrorCode,
			Text:     err.Error(),
			HttpCode: httpCode,
			Values:   nil,
		})
		if marshalErr != nil {
			h.logger.Error("cannot marshal json", "error", marshalErr)
		} else {
			body = errBody
		}
	}

	w.Header().Add("Content-Type", "application/json")
	w.WriteHeader(httpCode)
	w.Write(body)
}
