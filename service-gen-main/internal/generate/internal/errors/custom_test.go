package errors

import (
	"testing"

	"github.com/stretchr/testify/suite"
	"gitlab.com/soluqa/bookio/service-generator/internal/loader"
)

type CustomErrorsTestSuite struct {
	suite.Suite
}

func TestCustomErrorsSuite(t *testing.T) {
	t.Parallel()
	suite.Run(t, new(CustomErrorsTestSuite))
}

func (s *CustomErrorsTestSuite) TestHappyScenarioBasic() {
	testOpenAPI, err := loader.LoadOpenApi("testdata/custom_errors_basic.yaml")
	s.Require().NoError(err)
	result, err := GenerateCustomErrors(testOpenAPI)
	s.Assert().NoError(err)
	s.Assert().Equal(`// Code generated by go generate; DO NOT EDIT.
package errors

const (
	NameTooShortCode = "NAME_TOO_SHORT"
)

// NameTooShort custom error.
func NameTooShort() *ApplicationError {
	return New(NameTooShortCode, "The provided name is too short.", 400, nil)
}
`, string(result))
}

func (s *CustomErrorsTestSuite) TestHappyScenarioHasValues() {
	testOpenAPI, err := loader.LoadOpenApi("testdata/custom_errors_has_values.yaml")
	s.Require().NoError(err)
	result, err := GenerateCustomErrors(testOpenAPI)
	s.Assert().NoError(err)
	s.Assert().Equal(`// Code generated by go generate; DO NOT EDIT.
package errors

const (
	NameTooLongCode  = "NAME_TOO_LONG"
	NameTooShortCode = "NAME_TOO_SHORT"
)

// NameTooLong - Validates that the name is less than 20 characters.
func NameTooLong(values map[string]any) *ApplicationError {
	return New(NameTooLongCode, "The provided name is too long.", 400, values)
}

// NameTooShort - Validates that the name is 10 characters or longer.
func NameTooShort() *ApplicationError {
	return New(NameTooShortCode, "The provided name is too short.", 400, nil)
}
`, string(result))
}

func (s *CustomErrorsTestSuite) TestNoXErrors() {
	testOpenAPI, err := loader.LoadOpenApi("testdata/custom_errors_no_xerrors.yaml")
	s.Require().NoError(err)
	result, err := GenerateCustomErrors(testOpenAPI)
	s.Assert().NoError(err)
	s.Assert().Nil(result)
}

func (s *CustomErrorsTestSuite) TestXErrorMissingInApplicationErrorEnums() {
	testOpenAPI, err := loader.LoadOpenApi("testdata/custom_errors_xerror_missing.yaml")
	s.Require().NoError(err)
	result, err := GenerateCustomErrors(testOpenAPI)
	s.Assert().Nil(result)
	s.Assert().EqualError(err, "the code 'NAME_TOO_SHORT' defined in x-errors is missing in ApplicationError code enums, please add it. See README.md for further instructions")
}

func (s *CustomErrorsTestSuite) TestXErrorMissingApplicationError() {
	testOpenAPI, err := loader.LoadOpenApi("testdata/custom_errors_xerror_missing_app_error.yaml")
	s.Require().NoError(err)
	result, err := GenerateCustomErrors(testOpenAPI)
	s.Assert().Nil(result)
	s.Assert().EqualError(err, "API and paths defined but no ApplicationError defined. See README.md for further instructions")
}

func (s *CustomErrorsTestSuite) TestXErrorMissingRequiredCodeInApplicationError01() {
	testOpenAPI, err := loader.LoadOpenApi("testdata/custom_errors_definition_error_01.yaml")
	s.Require().NoError(err)
	result, err := GenerateCustomErrors(testOpenAPI)
	s.Assert().Nil(result)
	s.Assert().EqualError(err, "x-errors: httpCode must be int")
}

func (s *CustomErrorsTestSuite) TestXErrorMissingRequiredCodeInApplicationError02() {
	testOpenAPI, err := loader.LoadOpenApi("testdata/custom_errors_definition_error_02.yaml")
	s.Require().NoError(err)
	result, err := GenerateCustomErrors(testOpenAPI)
	s.Assert().Nil(result)
	s.Assert().EqualError(err, "x-errors: message must be string")
}

func (s *CustomErrorsTestSuite) TestXErrorMissingRequiredCodeInApplicationError03() {
	testOpenAPI, err := loader.LoadOpenApi("testdata/custom_errors_definition_error_03.yaml")
	s.Require().NoError(err)
	result, err := GenerateCustomErrors(testOpenAPI)
	s.Assert().Nil(result)
	s.Assert().EqualError(err, "no codes defined in ApplicationError. See README.md for further instructions")
}
