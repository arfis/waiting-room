package errors

import (
	"fmt"
	"log/slog"
	"os"

	"github.com/getkin/kin-openapi/openapi3"
	"gitlab.com/soluqa/bookio/service-generator/internal/utils"
)

func Generate(wd string, api *openapi3.T) {
	codes := utils.ExecuteAndFormat(codesT, nil)
	utils.ForceSave(fmt.Sprintf("%s/internal/errors/codes.go", wd), codes)

	errors := utils.ExecuteAndFormat(errorT, nil)
	utils.ForceSave(fmt.Sprintf("%s/internal/errors/error.go", wd), errors)

	errorsWithStack := utils.ExecuteAndFormat(errorStackT, nil)
	utils.ForceSave(fmt.Sprintf("%s/internal/errors/errorwithstack.go", wd), errorsWithStack)

	response := utils.ExecuteAndFormat(responseT, nil)
	utils.ForceSave(fmt.Sprintf("%s/internal/errors/response.go", wd), response)

	customErrors, err := GenerateCustomErrors(api)
	if err != nil {
		slog.Error(err.Error())
		os.Exit(1)
	}
	if len(customErrors) > 0 {
		utils.ForceSave(fmt.Sprintf("%s/internal/errors/generated.go", wd), customErrors)
	}
}

var customErrorsT = utils.CreateTemplate(`
// Code generated by go generate; DO NOT EDIT.
package errors

{{- if .Formatted }}
import (
	"fmt"
)
{{- end }}

const (
	{{- range .Errors }}
	{{.CodeCamelCase}}Code = "{{.Code}}"		
	{{- end }}
)

{{- range .Errors }}
	{{- if .Description }}
	// {{.CodeCamelCase}} - {{.Description}}
	{{- else }}
	// {{.CodeCamelCase}} custom error.
	{{- end }}
	{{- if .HasValues }}
		func {{.CodeCamelCase}}(values map[string]any{{- if .FormatString }}, params ...any {{- end }}) *ApplicationError {
			return New({{.CodeCamelCase}}Code, {{- if .FormatString }}fmt.Sprintf("{{.Message}}", params...){{- else}}"{{.Message}}"{{- end }}, {{.HttpCode}}, values)
		}
	{{- else }}
		func {{.CodeCamelCase}}({{- if .FormatString }}params ...any {{- end }}) *ApplicationError {
			return New({{.CodeCamelCase}}Code, {{- if .FormatString }}fmt.Sprintf("{{.Message}}", params...){{- else}}"{{.Message}}"{{- end }}, {{.HttpCode}}, nil)
		}
	{{- end }}
{{- end }}
`)

var codesT = utils.CreateTemplate(`
// Code generated by go generate; DO NOT EDIT.
package errors

const (
	BusinessErrorCode                 string = "BUSINESS_ERROR"
	ValidationErrorCode               string = "VALIDATION_ERROR"
	MissingRequiredFieldErrorCode     string = "MISSING_REQUIRED_FIELD_ERROR"
	ObjectVersionMismatchErrorCode    string = "OBJECT_VERSION_MISMATCH_ERROR"
	NotFoundErrorCode                 string = "NOT_FOUND_ERROR"
	ServiceCallErrorCode              string = "SERVICE_CALL_ERROR"
	ForbiddenErrorCode                string = "FORBIDDEN_ERROR"
	InternalServerErrorCode           string = "INTERNAL_SERVER_ERROR"
	AuthHeaderCode                    string = "AUTH_HEADER"
	UnprocessableEntityForeignKeyCode string = "UNPROCESSABLE_ENTITY_FOREIGN_KEY"
	UnprocessableEntityUniqueCode     string = "UNPROCESSABLE_ENTITY_UNIQUE"
)
`)

var errorStackT = utils.CreateTemplate(`
// Code generated by go generate; DO NOT EDIT.
package errors

import (
	"bufio"
	"bytes"
	"fmt"
	"os"
	"reflect"
	"runtime"
	"strings"
)

// MaxStackDepth The maximum number of stack-frames on any error.
var MaxStackDepth = 50

// ErrorWithStack is an error with an attached stacktrace. It can be used
// wherever the builtin error interface is expected.
type ErrorWithStack struct {
	Err    error
	stack  []uintptr
	frames []StackFrame
	prefix string
}

// A StackFrame contains all necessary information about to generate a line
// in a callstack.
type StackFrame struct {
	// The path to the file containing this ProgramCounter
	File string
	// The LineNumber in that file
	LineNumber int
	// The Name of the function that contains this ProgramCounter
	Name string
	// The Package that contains this function
	Package string
	// The underlying ProgramCounter
	ProgramCounter uintptr
}

// Wrap makes an Error from the given value. If that value is already an
// error then it will be used directly, if not, it will be passed to
// fmt.Errorf("%v"). The stacktrace will point to the line of code that
// called New.
func Wrap(e interface{}) error {
	var err error

	if e == nil {
		return nil
	}

	switch e := e.(type) {
	case error:
		err = e
	default:
		err = fmt.Errorf("%v", e)
	}

	stack := make([]uintptr, MaxStackDepth)
	length := runtime.Callers(2, stack[:])
	return &ErrorWithStack{
		Err:   err,
		stack: stack[:length],
	}
}

// Error returns the underlying error's message.
func (err *ErrorWithStack) Error() string {

	msg := err.Err.Error()
	if err.prefix != "" {
		msg = fmt.Sprintf("%s: %s", err.prefix, msg)
	}

	return msg
}

// Stack returns the callstack formatted the same way that go does
// in runtime/debug.Stack()
func (err *ErrorWithStack) Stack() []byte {
	buf := bytes.Buffer{}

	for _, frame := range err.StackFrames() {
		buf.WriteString(frame.String())
	}

	return buf.Bytes()
}

// Callers satisfies the bugsnag ErrorWithCallerS() interface
// so that the stack can be read out.
func (err *ErrorWithStack) Callers() []uintptr {
	return err.stack
}

// ErrorStack returns a string that contains both the
// error message and the callstack.
func (err *ErrorWithStack) ErrorStack() string {
	return err.TypeName() + " " + err.Error() + "\n" + string(err.Stack())
}

// StackFrames returns an array of frames containing information about the
// stack.
func (err *ErrorWithStack) StackFrames() []StackFrame {
	if err.frames == nil {
		err.frames = make([]StackFrame, len(err.stack))

		for i, pc := range err.stack {
			err.frames[i] = NewStackFrame(pc)
		}
	}

	return err.frames
}

// TypeName returns the type this error. e.g. *errors.stringError.
func (err *ErrorWithStack) TypeName() string {
	return reflect.TypeOf(err.Err).String()
}

// Unwrap Return the wrapped error (implements api for As function).
func (err *ErrorWithStack) Unwrap() error {
	return err.Err
}

// NewStackFrame popoulates a stack frame object from the program counter.
func NewStackFrame(pc uintptr) (frame StackFrame) {

	frame = StackFrame{ProgramCounter: pc}
	if frame.Func() == nil {
		return
	}
	frame.Package, frame.Name = packageAndName(frame.Func())

	// pc -1 because the program counters we use are usually return addresses,
	// and we want to show the line that corresponds to the function call
	frame.File, frame.LineNumber = frame.Func().FileLine(pc - 1)
	return

}

// Func returns the function that contained this frame.
func (frame *StackFrame) Func() *runtime.Func {
	if frame.ProgramCounter == 0 {
		return nil
	}
	return runtime.FuncForPC(frame.ProgramCounter)
}

// String returns the stackframe formatted in the same way as go does
// in runtime/debug.Stack()
func (frame *StackFrame) String() string {
	source, err := frame.sourceLine()
	if err != nil {
		return ""
	}
	str := fmt.Sprintf("\t%s.%s: %s\n", frame.Package, frame.Name, source)

	return str + fmt.Sprintf("%s:%d (0x%x)\n", frame.File, frame.LineNumber, frame.ProgramCounter)
}

// SourceLine gets the line of code (from File and Line) of the original source if possible.
func (frame *StackFrame) SourceLine() (string, error) {
	source, err := frame.sourceLine()
	if err != nil {
		return source, Wrap(err)
	}
	return source, err
}

func (frame *StackFrame) sourceLine() (string, error) {
	if frame.LineNumber <= 0 {
		return "???", nil
	}

	file, err := os.Open(frame.File)
	if err != nil {
		return "", err
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)
	currentLine := 1
	for scanner.Scan() {
		if currentLine == frame.LineNumber {
			return string(bytes.Trim(scanner.Bytes(), " \t")), nil
		}
		currentLine++
	}
	if err := scanner.Err(); err != nil {
		return "", err
	}

	return "???", nil
}

func packageAndName(fn *runtime.Func) (string, string) {
	name := fn.Name()
	pkg := ""

	// The name includes the path name to the package, which is unnecessary
	// since the file name is already included.  Plus, it has center dots.
	// That is, we see
	//  runtime/debug.*T·ptrmethod
	// and want
	//  *T.ptrmethod
	// Since the package path might contain dots (e.g. code.google.com/...),
	// we first remove the path prefix if there is one.
	if lastslash := strings.LastIndex(name, "/"); lastslash >= 0 {
		pkg += name[:lastslash] + "/"
		name = name[lastslash+1:]
	}
	if period := strings.Index(name, "."); period >= 0 {
		pkg += name[:period]
		name = name[period+1:]
	}

	name = strings.ReplaceAll(name, "·", ".")
	return pkg, name
}
`)

var errorT = utils.CreateTemplate(`
// Code generated by go generate; DO NOT EDIT.
package errors

import (
	"errors"
	"fmt"
	"net/http"

	"github.com/go-playground/validator/v10"
)

const (
	NotFoundErrorMessage             = "entity was not found"
	ForeignKeyConstraintErrorMessage = "entity violates foreign key constraint"
	UniqueConstraintErrorMessage     = "entity violates unique constraint"
)

type ErrorValues map[string]any

type ApplicationError struct {
	Code string ` + "`json:" + `"code"` + "`" + `
	Text  string ` + "`json:" + `"text"` + "`" + `
	HttpCode int ` + "`json:" + `"-"` + "`" + `
	Values   ErrorValues ` + "`json:" + `"values,omitempty"` + "`" + `
}

func Business(err error, values ErrorValues) *ApplicationError {
	return NewError(err, BusinessErrorCode, http.StatusBadRequest, values)
}

func System(err error, values ErrorValues) *ApplicationError {
	return NewError(err, InternalServerErrorCode, http.StatusInternalServerError, values)
}

func Validation(err error, values ErrorValues) *ApplicationError {
	return NewError(err, ValidationErrorCode, http.StatusBadRequest, values)
}

// RequestValidation adds - based on validator.ValidationErrors -
// metadata about errors in specific fields into the error.
func RequestValidation(err error) *ApplicationError {
	var validationErrors validator.ValidationErrors
	if errors.As(err, &validationErrors) {
		invalidFields := make(map[string]any)
		for _, validationError := range validationErrors {
			invalidFields[validationError.StructNamespace()] = validationError.Tag()
		}

		return Validation(err, invalidFields)
	}

	return Validation(err, nil)
}

func ServiceCall(err error, values ErrorValues) *ApplicationError {
	return NewError(err, ServiceCallErrorCode, http.StatusFailedDependency, values)
}

func Forbidden(text string, values ErrorValues) *ApplicationError {
	return New(ForbiddenErrorCode, text, http.StatusForbidden, values)
}

func NotFound(err error, values ErrorValues) *ApplicationError {
	return NewError(err, NotFoundErrorCode, http.StatusNotFound, values)
}

// EntityNotFound is useful if we want to return 404 and we do not want to
// pass e.g. SQL error message to the output (to avoid sensitive data leak).
func EntityNotFound() *ApplicationError {
	return New(NotFoundErrorCode, NotFoundErrorMessage, http.StatusNotFound, nil)
}

// ForeignKeyConstraint is useful if we want to return 422 in the case
// of e.g. updating entity to non-existing foreign key.
func ForeignKeyConstraint() *ApplicationError {
	return New(UnprocessableEntityForeignKeyCode, ForeignKeyConstraintErrorMessage, http.StatusUnprocessableEntity, nil)
}

// UniqueConstraint is useful if we want to return 422 in the case
// of e.g. updating entity violating unique constraint.
func UniqueConstraint() *ApplicationError {
	return New(UnprocessableEntityUniqueCode, UniqueConstraintErrorMessage, http.StatusUnprocessableEntity, nil)
}

func New(code, text string, httpCode int, values ErrorValues) *ApplicationError {
	return &ApplicationError{
		Code:     code,
		Text:     text,
		HttpCode: httpCode,
		Values:   values,
	}
}

func NewError(err error, code string, httpCode int, values ErrorValues) *ApplicationError {
	return &ApplicationError{
		Code:     code,
		Text:     err.Error(),
		HttpCode: httpCode,
		Values:   values,
	}
}

func FromError(err error) (*ApplicationError, bool) {
	if err == nil {
		return nil, true
	}
	var appErr *ApplicationError
	if errors.As(err, &appErr) {
		return appErr, true
	}
	return Business(err, nil), false
}

func (e *ApplicationError) Error() string {
	return fmt.Sprintf("code: %s text: %s, status: %d values: %+v", e.Code, e.Text, e.HttpCode, e.Values)
}
`)

var responseT = utils.CreateTemplate(`
// Code generated by go generate; DO NOT EDIT.
package errors

import (
	"encoding/json"
	"net/http"
	"errors"
    "log/slog"
)

type ResponseErrorHandler struct {
	logger *slog.Logger
}

func NewResponseErrorHandler(logger *slog.Logger) *ResponseErrorHandler {
	return &ResponseErrorHandler{
		logger: logger,
	}
}

func (h *ResponseErrorHandler) HandleAndWriteError(w http.ResponseWriter, r *http.Request, err error) {
	var body []byte
	var httpCode int = http.StatusInternalServerError
	var appErr *ApplicationError

	h.logger.Error("error occurred", "error", err)

	if errors.As(err, &appErr) {
		httpCode = appErr.HttpCode
		errBody, marshalErr := json.Marshal(appErr)
		if marshalErr != nil {
			h.logger.Error("cannot marshal json", "error", marshalErr)
		} else {
			body = errBody
		}
	} else {
		errBody, marshalErr := json.Marshal(ApplicationError{
			Code:     InternalServerErrorCode,
			Text:     err.Error(),
			HttpCode: httpCode,
			Values:   nil,
		})
		if marshalErr != nil {
			h.logger.Error("cannot marshal json", "error", marshalErr)
		} else {
			body = errBody
		}
	}

	w.Header().Add("Content-Type", "application/json")
	w.WriteHeader(httpCode)
	w.Write(body)
}
`)
