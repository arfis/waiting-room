package middleware

import (
	"fmt"

	"gitlab.com/soluqa/bookio/service-generator/internal/utils"
)

func generateRequestId(wd, module string) {
	data := map[string]string{"Module": module}
	requestId := utils.ExecuteAndFormat(requestIdT, data)
	utils.ForceSave(fmt.Sprintf("%s/internal/middleware/requestId.go", wd), requestId)
}

var requestIdT = utils.CreateTemplate(`
// Code generated by go generate; DO NOT EDIT.
package middleware

import (
	"context"
	"net/http"

	appCtx "{{.Module}}/internal/context"
	"github.com/google/uuid"
)

const (
	requestIdHeader     = "X-Request-Id"
	correlationIdHeader = "X-Correlation-Id"
)

func RequestIdMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		var requestID string

		if requestID = r.Header.Get(requestIdHeader); requestID == "" {
			requestID = r.Header.Get(correlationIdHeader)
		}

		if err := uuid.Validate(requestID); err != nil {
			requestID = uuid.NewString()
		}

		r.Header.Set(requestIdHeader, requestID)

		next.ServeHTTP(w, r.WithContext(context.WithValue(r.Context(), appCtx.REQUESTID, requestID)))
	})
}
`)
