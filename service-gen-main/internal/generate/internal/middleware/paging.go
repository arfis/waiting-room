package middleware

import (
	"fmt"

	"gitlab.com/soluqa/bookio/service-generator/internal/utils"
)

func generatePaging(wd, module string) {
	data := map[string]string{"Module": module}
	paging := utils.ExecuteAndFormat(pagingT, data)
	utils.ForceSave(fmt.Sprintf("%s/internal/middleware/paging.go", wd), paging)
}

var pagingT = utils.CreateTemplate(`
// Code generated by go generate; DO NOT EDIT.
package middleware

import (
	"fmt"
	"net/http"
	"strconv"
	"strings"

	ngErrors "{{.Module}}/internal/errors"
)

func NewPagingMiddleware(
	responseErrorHandler *ngErrors.ResponseErrorHandler,
) *PagingMiddleware {
	return &PagingMiddleware{
		responseErrorHandler: responseErrorHandler,
	}
}

type PagingMiddleware struct {
	responseErrorHandler *ngErrors.ResponseErrorHandler
}

func (m *PagingMiddleware) Paging(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		params := r.URL.Query()

		// set default values for query parameters for pagination
		sizeVal := int64(20)
		pageVal := int64(0)

		// check and validate size or set default
		if params.Has("size") {
			maxSizeAllowed := int64(100)
			s, err := strconv.ParseInt(params.Get("size"), 10, 64)
			if err == nil {
				sizeVal = s
			}
			if s > maxSizeAllowed {
				m.responseErrorHandler.HandleAndWriteError(
					w,
					r,
					ngErrors.Validation(fmt.Errorf("query parameter 'size' exceeded allowed value of %d", maxSizeAllowed), nil),
				)
				return
			}
		}
		params.Set("size", strconv.FormatInt(sizeVal, 10))

		// check page or set default
		if params.Has("page") {
			p, err := strconv.ParseInt(params.Get("page"), 10, 64)
			if err == nil {
				pageVal = p
			}
		}
		params.Set("page", strconv.FormatInt(pageVal, 10))

		// this is, unfortunately, intentional. If you use arrays in query parameters,
		// you can use it like ?sort=name&sort=code or you can use it like ?sort=name,code
		sorts := params["sort"]
		for i := range sorts {
			cleanSort := m.removeDelimiter(sorts[i])
			sorts[i] = cleanSort
		}
		r.URL.RawQuery = params.Encode()
		next.ServeHTTP(w, r)
	})
}

func (m *PagingMiddleware) removeDelimiter(s string) string {
	return strings.ReplaceAll(s, ",", " ")
}
`)
