package middleware

import (
	"fmt"

	"gitlab.com/soluqa/bookio/service-generator/internal/utils"
)

func generateLogging(wd string) {
	code := utils.ExecuteAndFormat(loggingT, nil)
	utils.ForceSave(fmt.Sprintf("%s/internal/middleware/logging.go", wd), code)
}

var loggingT = utils.CreateTemplate(`
// Code generated by go generate; DO NOT EDIT.
package middleware

import (
	"bytes"
	"io"
	"log/slog"
	"net/http"

	"github.com/go-chi/chi/v5"
)

// writer struct that holds info about written response and body
type bodyLogWriter struct {
	http.ResponseWriter
	body        *bytes.Buffer
	status      int
	wroteHeader bool
}

func (w *bodyLogWriter) Header() http.Header {
	return w.ResponseWriter.Header()
}

func (w *bodyLogWriter) Write(b []byte) (int, error) {
	w.body.Write(b)
	return w.ResponseWriter.Write(b)
}

func (w *bodyLogWriter) WriteHeader(statusCode int) {
	if w.wroteHeader {
		return
	}
	w.wroteHeader = true
	w.status = statusCode
	w.ResponseWriter.WriteHeader(statusCode)
}

type LoggingMiddleware struct {
	logger *slog.Logger
}

func NewLoggingMiddleware(logger *slog.Logger) *LoggingMiddleware {
	return &LoggingMiddleware{
		logger: logger,
	}
}

func (m *LoggingMiddleware) LoggingMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// request
		requestData := struct {
			URI        string      ` + "`" + `json:"uri"` + "`" + `
			Parameters []string    ` + "`" + `json:"parameters"` + "`" + `
			Method     string      ` + "`" + `json:"method"` + "`" + `
			Headers    http.Header ` + "`" + `json:"headers"` + "`" + `
			Body       string      ` + "`" + `json:"body"` + "`" + `
		}{
			URI:     r.RequestURI,
			Method:  r.Method,
			Headers: r.Header,
		}
		chiRouteContext := chi.RouteContext(r.Context())
		if chiRouteContext != nil && len(chiRouteContext.URLParams.Keys) > 0 {
			requestData.Parameters = chiRouteContext.URLParams.Keys
		}
		body, err := io.ReadAll(r.Body)
		if err == nil {
			requestData.Body = string(body)
		} else {
			m.logger.Error("unable to read request body", "error", err)
		}
		r.Body = io.NopCloser(bytes.NewReader(body))
		m.logger.Debug("request", "request", requestData)

		// response
		blw := &bodyLogWriter{body: bytes.NewBufferString(""), ResponseWriter: w}
		next.ServeHTTP(blw, r)
		responseData := struct {
			StatusCode int         ` + "`" + `json:"status_code"` + "`" + `
			Headers    http.Header ` + "`" + `json:"headers"` + "`" + `
			Body       string      ` + "`" + `json:"body"` + "`" + `
		}{
			StatusCode: blw.status,
			Body:       blw.body.String(),
			Headers:    w.Header(),
		}
		m.logger.Debug("response", "response", responseData)
	})
}
`)
