// Code generated by go generate; DO NOT EDIT.

package errors

import (
	stdErrors "errors"
	"fmt"
)

// ResponseWriteError wraps an error that occurred while attempting to write a response.
// HeadersCommitted indicates whether the HTTP headers were already sent to the client
// at the time the error was raised.
type ResponseWriteError struct {
	Err              error
	HeadersCommitted bool
}

func (e *ResponseWriteError) Error() string {
	if e == nil {
		return "<nil>"
	}
	return fmt.Sprintf("response write error: %v", e.Err)
}

func (e *ResponseWriteError) Unwrap() error {
	if e == nil {
		return nil
	}
	return e.Err
}

func NewResponseWriteError(err error, headersCommitted bool) *ResponseWriteError {
	if err == nil {
		return nil
	}
	return &ResponseWriteError{
		Err:              err,
		HeadersCommitted: headersCommitted,
	}
}

func IsHeadersCommittedError(err error) bool {
	var responseErr *ResponseWriteError
	if !stdErrors.As(err, &responseErr) {
		return false
	}
	return responseErr.HeadersCommitted
}
