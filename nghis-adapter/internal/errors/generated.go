// Code generated by go generate; DO NOT EDIT.
package errors

import (
	"fmt"
)

var (
	DeletePatientTokenErrors  DeletePatientToken
	FinishCareItemErrors      FinishCareItem
	GetPatientTokenErrors     GetPatientToken
	InterruptCareItemErrors   InterruptCareItem
	NewReservationErrors      NewReservation
	StartCareItemErrors       StartCareItem
	WaitingRoomCareItemErrors WaitingRoomCareItem
)

type DeletePatientToken struct{}

// Creates business error for DeletePatientToken.
// msg: The query params where not defined
func (e *DeletePatientToken) QueryParamNotDefined() *ApplicationError {
	return New("QUERY_PARAM_NOT_DEFINED", fmt.Sprintf("The query params where not defined"), 400, nil)
}

type FinishCareItem struct{}

// Creates business error for FinishCareItem.
// msg: CareItem is already FINISHED.
func (e *FinishCareItem) CareItemStatusAlreadyFinished() *ApplicationError {
	return New("CARE_ITEM_STATUS_ALREADY_FINISHED", fmt.Sprintf("CareItem is already FINISHED."), 400, nil)
}

type GetPatientToken struct{}

// Creates business error for GetPatientToken.
// msg: The query params where not defined
func (e *GetPatientToken) QueryParamNotDefined() *ApplicationError {
	return New("QUERY_PARAM_NOT_DEFINED", fmt.Sprintf("The query params where not defined"), 400, nil)
}

type InterruptCareItem struct{}

// Creates business error for InterruptCareItem.
// msg: CareItem is already INTERRUPTED.
func (e *InterruptCareItem) CareItemStatusAlreadyInterrupted() *ApplicationError {
	return New("CARE_ITEM_STATUS_ALREADY_INTERRUPTED", fmt.Sprintf("CareItem is already INTERRUPTED."), 400, nil)
}

type NewReservation struct{}

// Creates business error for NewReservation.
// msg: Specified period for reservation was already taken.
func (e *NewReservation) RequestedPeriodAlreadyReserved(values map[string]interface{}) *ApplicationError {
	return New("REQUESTED_PERIOD_ALREADY_RESERVED", fmt.Sprintf("Specified period for reservation was already taken."), 400, values)
}

type StartCareItem struct{}

// Creates business error for StartCareItem.
// msg: CareItem's is already ONGOING.
func (e *StartCareItem) CareItemStatusAlreadyOngoing() *ApplicationError {
	return New("CARE_ITEM_STATUS_ALREADY_ONGOING", fmt.Sprintf("CareItem's is already ONGOING."), 400, nil)
}

type WaitingRoomCareItem struct{}

// Creates business error for WaitingRoomCareItem.
// msg: CareItem's previous status is not PLANNED or APPROVED.
func (e *WaitingRoomCareItem) CareItemStatusNotPlannedOrApproved() *ApplicationError {
	return New("CARE_ITEM_STATUS_NOT_PLANNED_OR_APPROVED", fmt.Sprintf("CareItem's previous status is not PLANNED or APPROVED."), 400, nil)
}
