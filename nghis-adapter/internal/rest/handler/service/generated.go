// Code generated by go generate; DO NOT EDIT.

package service

import (
	"encoding/json"
	"github.com/arfis/waiting-room/nghis-adapter/internal/data/dto"
	ngErrors "github.com/arfis/waiting-room/nghis-adapter/internal/errors"
	"github.com/arfis/waiting-room/nghis-adapter/internal/rest/handler"
	"github.com/arfis/waiting-room/nghis-adapter/internal/service/service"
	"log/slog"
	"net/http"
)

type Handler struct {
	svc                  *service.Service
	responseErrorHandler *ngErrors.ResponseErrorHandler
}

func New(
	svc *service.Service,
	responseErrorHandler *ngErrors.ResponseErrorHandler,
) *Handler {
	return &Handler{
		svc:                  svc,
		responseErrorHandler: responseErrorHandler,
	}
}

func init() {
	slog.Debug("Generated handler 'service/Handler' initialized")
}

func (h *Handler) FindServices(w http.ResponseWriter, r *http.Request) {
	var applicationErr error
	var resp []dto.ServicesResp
	req := dto.FindServicesReq{}
	applicationErr = json.NewDecoder(r.Body).Decode(&req)
	if applicationErr != nil {
		h.responseErrorHandler.HandleAndWriteError(w, r, ngErrors.New(ngErrors.InternalServerErrorCode, "problem decoding request body", http.StatusInternalServerError, nil))
		return
	}
	applicationErr = handler.GetValidator().Struct(req)
	if applicationErr != nil {
		h.responseErrorHandler.HandleAndWriteError(w, r, ngErrors.RequestValidation(applicationErr))
		return
	}
	resp, applicationErr = h.svc.FindServices(
		r.Context(),
		&req,
	)
	if applicationErr != nil {
		h.responseErrorHandler.HandleAndWriteError(w, r, applicationErr)
		return
	}
	err := handler.WriteJson(r.Context(), w, http.StatusOK, resp)
	if err != nil {
		slog.ErrorContext(r.Context(), "FindServices - error writing response", "error", err)
		h.responseErrorHandler.HandleAndWriteError(w, r, err)
		return
	}
}
