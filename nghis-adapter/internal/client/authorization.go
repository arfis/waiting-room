// Code generated by go generate; DO NOT EDIT.

package client

import (
	"net/http"
	"strconv"

	"github.com/arfis/waiting-room/nghis-adapter/internal/context"
	"github.com/arfis/waiting-room/nghis-adapter/internal/middleware"
)

type authorizationRoundTripper struct {
	rt http.RoundTripper
}

func (t authorizationRoundTripper) RoundTrip(request *http.Request) (*http.Response, error) {
	value := request.Context().Value(context.TENANT)
	authorization := request.Context().Value(context.ORIGINAL_TOKEN)
	if authorization != nil {
		if auth, ok := authorization.(string); ok {
			request.Header.Set(middleware.USER_INFO, auth)
		}
	}
	switch tenantID := value.(type) {
	case string:
		request.Header.Set(middleware.TENANT_HEADER, tenantID)
	case int:
		request.Header.Set(middleware.TENANT_HEADER, strconv.Itoa(tenantID))
	case int32:
		request.Header.Set(middleware.TENANT_HEADER, strconv.Itoa(int(tenantID)))
	}
	response, err := t.rt.RoundTrip(request)
	return response, err
}

func AuthorizationTransport(transport http.RoundTripper) http.RoundTripper {
	return &authorizationRoundTripper{rt: transport}
}
