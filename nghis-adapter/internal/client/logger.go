// Code generated by go generate; DO NOT EDIT.
// Generator version: v3.0.1
package client

import (
	"bytes"
	"io"
	"log/slog"
	"net/http"
	"net/url"
)

type loggingRoundTripper struct {
	rt     http.RoundTripper
	logger *slog.Logger
}

func (l *loggingRoundTripper) RoundTrip(request *http.Request) (*http.Response, error) {
	l.logRequest(request)
	response, err := l.rt.RoundTrip(request)
	if response != nil {
		l.logResponse(response, request)
	} else {
		l.logger.Debug("nil response received")
	}
	return response, err
}

func (l *loggingRoundTripper) logRequest(request *http.Request) {
	requestData := struct {
		URI        string      `json:"uri"`
		Parameters url.Values  `json:"parameters"`
		Method     string      `json:"method"`
		Headers    http.Header `json:"headers"`
		Body       string      `json:"body"`
	}{
		URI:        request.URL.String(),
		Method:     request.Method,
		Headers:    request.Header,
		Parameters: request.URL.Query(),
	}
	if request.Body != nil {
		body, err := io.ReadAll(request.Body)
		if err == nil {
			requestData.Body = string(body)
		} else {
			l.logger.Error("unable to read request body", "error", err)
		}
		request.Body = io.NopCloser(bytes.NewReader(body))
	}

	l.logger.Debug("internal_request_start", "internal_request", requestData)
}

func (l *loggingRoundTripper) logResponse(response *http.Response, _ *http.Request) {
	responseData := struct {
		StatusCode int         `json:"status_code"`
		Headers    http.Header `json:"headers"`
		Body       string      `json:"body"`
	}{
		StatusCode: response.StatusCode,
		Headers:    response.Header,
	}
	body, err := io.ReadAll(response.Body)
	if err == nil {
		responseData.Body = string(body)
	} else {
		l.logger.Error("unable to read request body", "error", err)
	}
	response.Body = io.NopCloser(bytes.NewReader(body))

	l.logger.Debug("internal_request_end", "internal_response", responseData)
}

func LoggerTransport(transport http.RoundTripper, logger *slog.Logger) http.RoundTripper {
	return &loggingRoundTripper{
		rt:     transport,
		logger: logger,
	}
}
